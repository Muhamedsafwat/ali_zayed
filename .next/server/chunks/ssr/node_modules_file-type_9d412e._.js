module.exports = {

"[project]/node_modules/file-type/node_modules/strtok3/lib/AbstractTokenizer.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "AbstractTokenizer": (()=>AbstractTokenizer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/peek-readable/lib/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$EndOfStreamError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/peek-readable/lib/EndOfStreamError.js [app-rsc] (ecmascript)");
;
class AbstractTokenizer {
    /**
     * Constructor
     * @param options Tokenizer options
     * @protected
     */ constructor(options){
        /**
         * Tokenizer-stream position
         */ this.position = 0;
        this.numBuffer = new Uint8Array(8);
        this.fileInfo = options?.fileInfo ?? {};
        this.onClose = options?.onClose;
    }
    /**
     * Read a token from the tokenizer-stream
     * @param token - The token to read
     * @param position - If provided, the desired position in the tokenizer-stream
     * @returns Promise with token data
     */ async readToken(token, position = this.position) {
        const uint8Array = new Uint8Array(token.len);
        const len = await this.readBuffer(uint8Array, {
            position
        });
        if (len < token.len) throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$EndOfStreamError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["EndOfStreamError"]();
        return token.get(uint8Array, 0);
    }
    /**
     * Peek a token from the tokenizer-stream.
     * @param token - Token to peek from the tokenizer-stream.
     * @param position - Offset where to begin reading within the file. If position is null, data will be read from the current file position.
     * @returns Promise with token data
     */ async peekToken(token, position = this.position) {
        const uint8Array = new Uint8Array(token.len);
        const len = await this.peekBuffer(uint8Array, {
            position
        });
        if (len < token.len) throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$EndOfStreamError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["EndOfStreamError"]();
        return token.get(uint8Array, 0);
    }
    /**
     * Read a numeric token from the stream
     * @param token - Numeric token
     * @returns Promise with number
     */ async readNumber(token) {
        const len = await this.readBuffer(this.numBuffer, {
            length: token.len
        });
        if (len < token.len) throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$EndOfStreamError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["EndOfStreamError"]();
        return token.get(this.numBuffer, 0);
    }
    /**
     * Read a numeric token from the stream
     * @param token - Numeric token
     * @returns Promise with number
     */ async peekNumber(token) {
        const len = await this.peekBuffer(this.numBuffer, {
            length: token.len
        });
        if (len < token.len) throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$EndOfStreamError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["EndOfStreamError"]();
        return token.get(this.numBuffer, 0);
    }
    /**
     * Ignore number of bytes, advances the pointer in under tokenizer-stream.
     * @param length - Number of bytes to ignore
     * @return resolves the number of bytes ignored, equals length if this available, otherwise the number of bytes available
     */ async ignore(length) {
        if (this.fileInfo.size !== undefined) {
            const bytesLeft = this.fileInfo.size - this.position;
            if (length > bytesLeft) {
                this.position += bytesLeft;
                return bytesLeft;
            }
        }
        this.position += length;
        return length;
    }
    async close() {
        await this.onClose?.();
    }
    normalizeOptions(uint8Array, options) {
        if (options && options.position !== undefined && options.position < this.position) {
            throw new Error('`options.position` must be equal or greater than `tokenizer.position`');
        }
        if (options) {
            return {
                mayBeLess: options.mayBeLess === true,
                offset: options.offset ? options.offset : 0,
                length: options.length ? options.length : uint8Array.length - (options.offset ? options.offset : 0),
                position: options.position ? options.position : this.position
            };
        }
        return {
            mayBeLess: false,
            offset: 0,
            length: uint8Array.length,
            position: this.position
        };
    }
}
}}),
"[project]/node_modules/file-type/node_modules/strtok3/lib/ReadStreamTokenizer.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "ReadStreamTokenizer": (()=>ReadStreamTokenizer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$AbstractTokenizer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/file-type/node_modules/strtok3/lib/AbstractTokenizer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/peek-readable/lib/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$EndOfStreamError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/peek-readable/lib/EndOfStreamError.js [app-rsc] (ecmascript)");
;
;
const maxBufferSize = 256000;
class ReadStreamTokenizer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$AbstractTokenizer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AbstractTokenizer"] {
    /**
     * Constructor
     * @param streamReader stream-reader to read from
     * @param options Tokenizer options
     */ constructor(streamReader, options){
        super(options);
        this.streamReader = streamReader;
    }
    /**
     * Read buffer from tokenizer
     * @param uint8Array - Target Uint8Array to fill with data read from the tokenizer-stream
     * @param options - Read behaviour options
     * @returns Promise with number of bytes read
     */ async readBuffer(uint8Array, options) {
        const normOptions = this.normalizeOptions(uint8Array, options);
        const skipBytes = normOptions.position - this.position;
        if (skipBytes > 0) {
            await this.ignore(skipBytes);
            return this.readBuffer(uint8Array, options);
        }
        if (skipBytes < 0) {
            throw new Error('`options.position` must be equal or greater than `tokenizer.position`');
        }
        if (normOptions.length === 0) {
            return 0;
        }
        const bytesRead = await this.streamReader.read(uint8Array, normOptions.offset, normOptions.length);
        this.position += bytesRead;
        if ((!options || !options.mayBeLess) && bytesRead < normOptions.length) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$EndOfStreamError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["EndOfStreamError"]();
        }
        return bytesRead;
    }
    /**
     * Peek (read ahead) buffer from tokenizer
     * @param uint8Array - Uint8Array (or Buffer) to write data to
     * @param options - Read behaviour options
     * @returns Promise with number of bytes peeked
     */ async peekBuffer(uint8Array, options) {
        const normOptions = this.normalizeOptions(uint8Array, options);
        let bytesRead = 0;
        if (normOptions.position) {
            const skipBytes = normOptions.position - this.position;
            if (skipBytes > 0) {
                const skipBuffer = new Uint8Array(normOptions.length + skipBytes);
                bytesRead = await this.peekBuffer(skipBuffer, {
                    mayBeLess: normOptions.mayBeLess
                });
                uint8Array.set(skipBuffer.subarray(skipBytes), normOptions.offset);
                return bytesRead - skipBytes;
            }
            if (skipBytes < 0) {
                throw new Error('Cannot peek from a negative offset in a stream');
            }
        }
        if (normOptions.length > 0) {
            try {
                bytesRead = await this.streamReader.peek(uint8Array, normOptions.offset, normOptions.length);
            } catch (err) {
                if (options?.mayBeLess && err instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$EndOfStreamError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["EndOfStreamError"]) {
                    return 0;
                }
                throw err;
            }
            if (!normOptions.mayBeLess && bytesRead < normOptions.length) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$EndOfStreamError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["EndOfStreamError"]();
            }
        }
        return bytesRead;
    }
    async ignore(length) {
        // debug(`ignore ${this.position}...${this.position + length - 1}`);
        const bufSize = Math.min(maxBufferSize, length);
        const buf = new Uint8Array(bufSize);
        let totBytesRead = 0;
        while(totBytesRead < length){
            const remaining = length - totBytesRead;
            const bytesRead = await this.readBuffer(buf, {
                length: Math.min(bufSize, remaining)
            });
            if (bytesRead < 0) {
                return bytesRead;
            }
            totBytesRead += bytesRead;
        }
        return totBytesRead;
    }
}
}}),
"[project]/node_modules/file-type/node_modules/strtok3/lib/BufferTokenizer.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "BufferTokenizer": (()=>BufferTokenizer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/peek-readable/lib/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$AbstractTokenizer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/file-type/node_modules/strtok3/lib/AbstractTokenizer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$EndOfStreamError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/peek-readable/lib/EndOfStreamError.js [app-rsc] (ecmascript)");
;
;
class BufferTokenizer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$AbstractTokenizer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AbstractTokenizer"] {
    /**
     * Construct BufferTokenizer
     * @param uint8Array - Uint8Array to tokenize
     * @param options Tokenizer options
     */ constructor(uint8Array, options){
        super(options);
        this.uint8Array = uint8Array;
        this.fileInfo.size = this.fileInfo.size ? this.fileInfo.size : uint8Array.length;
    }
    /**
     * Read buffer from tokenizer
     * @param uint8Array - Uint8Array to tokenize
     * @param options - Read behaviour options
     * @returns {Promise<number>}
     */ async readBuffer(uint8Array, options) {
        if (options?.position) {
            if (options.position < this.position) {
                throw new Error('`options.position` must be equal or greater than `tokenizer.position`');
            }
            this.position = options.position;
        }
        const bytesRead = await this.peekBuffer(uint8Array, options);
        this.position += bytesRead;
        return bytesRead;
    }
    /**
     * Peek (read ahead) buffer from tokenizer
     * @param uint8Array
     * @param options - Read behaviour options
     * @returns {Promise<number>}
     */ async peekBuffer(uint8Array, options) {
        const normOptions = this.normalizeOptions(uint8Array, options);
        const bytes2read = Math.min(this.uint8Array.length - normOptions.position, normOptions.length);
        if (!normOptions.mayBeLess && bytes2read < normOptions.length) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$EndOfStreamError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["EndOfStreamError"]();
        }
        uint8Array.set(this.uint8Array.subarray(normOptions.position, normOptions.position + bytes2read), normOptions.offset);
        return bytes2read;
    }
    close() {
        return super.close();
    }
}
}}),
"[project]/node_modules/file-type/node_modules/strtok3/lib/core.js [app-rsc] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "fromBuffer": (()=>fromBuffer),
    "fromStream": (()=>fromStream),
    "fromWebStream": (()=>fromWebStream)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$ReadStreamTokenizer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/file-type/node_modules/strtok3/lib/ReadStreamTokenizer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$StreamReader$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/peek-readable/lib/StreamReader.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$WebStreamReader$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/peek-readable/lib/WebStreamReader.js [app-rsc] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$BufferTokenizer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/file-type/node_modules/strtok3/lib/BufferTokenizer.js [app-rsc] (ecmascript)");
;
;
;
;
;
function fromStream(stream, options) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$ReadStreamTokenizer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ReadStreamTokenizer"](new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$StreamReader$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["StreamReader"](stream), options);
}
function fromWebStream(webStream, options) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$ReadStreamTokenizer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ReadStreamTokenizer"](new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$WebStreamReader$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["WebStreamReader"](webStream), options);
}
function fromBuffer(uint8Array, options) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$BufferTokenizer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["BufferTokenizer"](uint8Array, options);
}
}}),
"[project]/node_modules/file-type/node_modules/strtok3/lib/core.js [app-rsc] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/peek-readable/lib/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$ReadStreamTokenizer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/file-type/node_modules/strtok3/lib/ReadStreamTokenizer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$BufferTokenizer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/file-type/node_modules/strtok3/lib/BufferTokenizer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$AbstractTokenizer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/file-type/node_modules/strtok3/lib/AbstractTokenizer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/file-type/node_modules/strtok3/lib/core.js [app-rsc] (ecmascript) <locals>");
}}),
"[project]/node_modules/file-type/node_modules/strtok3/lib/FileTokenizer.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "FileTokenizer": (()=>FileTokenizer),
    "fromFile": (()=>fromFile)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$AbstractTokenizer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/file-type/node_modules/strtok3/lib/AbstractTokenizer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/peek-readable/lib/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs$2f$promises__$5b$external$5d$__$28$node$3a$fs$2f$promises$2c$__cjs$29$__ = __turbopack_import__("[externals]/node:fs/promises [external] (node:fs/promises, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$EndOfStreamError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/peek-readable/lib/EndOfStreamError.js [app-rsc] (ecmascript)");
;
;
;
class FileTokenizer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$AbstractTokenizer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AbstractTokenizer"] {
    constructor(fileHandle, options){
        super(options);
        this.fileHandle = fileHandle;
    }
    /**
     * Read buffer from file
     * @param uint8Array - Uint8Array to write result to
     * @param options - Read behaviour options
     * @returns Promise number of bytes read
     */ async readBuffer(uint8Array, options) {
        const normOptions = this.normalizeOptions(uint8Array, options);
        this.position = normOptions.position;
        if (normOptions.length === 0) return 0;
        const res = await this.fileHandle.read(uint8Array, normOptions.offset, normOptions.length, normOptions.position);
        this.position += res.bytesRead;
        if (res.bytesRead < normOptions.length && (!options || !options.mayBeLess)) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$EndOfStreamError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["EndOfStreamError"]();
        }
        return res.bytesRead;
    }
    /**
     * Peek buffer from file
     * @param uint8Array - Uint8Array (or Buffer) to write data to
     * @param options - Read behaviour options
     * @returns Promise number of bytes read
     */ async peekBuffer(uint8Array, options) {
        const normOptions = this.normalizeOptions(uint8Array, options);
        const res = await this.fileHandle.read(uint8Array, normOptions.offset, normOptions.length, normOptions.position);
        if (!normOptions.mayBeLess && res.bytesRead < normOptions.length) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$EndOfStreamError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["EndOfStreamError"]();
        }
        return res.bytesRead;
    }
    async close() {
        await this.fileHandle.close();
        return super.close();
    }
}
async function fromFile(sourceFilePath) {
    const fileHandle = await (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs$2f$promises__$5b$external$5d$__$28$node$3a$fs$2f$promises$2c$__cjs$29$__["open"])(sourceFilePath, 'r');
    const stat = await fileHandle.stat();
    return new FileTokenizer(fileHandle, {
        fileInfo: {
            path: sourceFilePath,
            size: stat.size
        }
    });
}
}}),
"[project]/node_modules/file-type/node_modules/strtok3/lib/index.js [app-rsc] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "fromStream": (()=>fromStream)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs$2f$promises__$5b$external$5d$__$28$node$3a$fs$2f$promises$2c$__cjs$29$__ = __turbopack_import__("[externals]/node:fs/promises [external] (node:fs/promises, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/file-type/node_modules/strtok3/lib/core.js [app-rsc] (ecmascript) <locals>");
;
;
;
;
async function fromStream(stream, options) {
    const augmentedOptions = options ?? {};
    augmentedOptions.fileInfo = augmentedOptions.fileInfo ?? {};
    if (stream.path) {
        const stat = await (0, __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs$2f$promises__$5b$external$5d$__$28$node$3a$fs$2f$promises$2c$__cjs$29$__["stat"])(stream.path);
        augmentedOptions.fileInfo.path = stream.path;
        augmentedOptions.fileInfo.size = stat.size;
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["fromStream"])(stream, augmentedOptions);
}
}}),
"[project]/node_modules/file-type/node_modules/strtok3/lib/index.js [app-rsc] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$fs$2f$promises__$5b$external$5d$__$28$node$3a$fs$2f$promises$2c$__cjs$29$__ = __turbopack_import__("[externals]/node:fs/promises [external] (node:fs/promises, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/file-type/node_modules/strtok3/lib/core.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$FileTokenizer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/file-type/node_modules/strtok3/lib/FileTokenizer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/file-type/node_modules/strtok3/lib/index.js [app-rsc] (ecmascript) <locals>");
}}),
"[project]/node_modules/file-type/node_modules/strtok3/lib/core.js [app-rsc] (ecmascript) <exports>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "AbstractTokenizer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$AbstractTokenizer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AbstractTokenizer"]),
    "EndOfStreamError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$EndOfStreamError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["EndOfStreamError"]),
    "fromBuffer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["fromBuffer"]),
    "fromStream": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["fromStream"]),
    "fromWebStream": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["fromWebStream"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$AbstractTokenizer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/file-type/node_modules/strtok3/lib/AbstractTokenizer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$EndOfStreamError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/peek-readable/lib/EndOfStreamError.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/file-type/node_modules/strtok3/lib/core.js [app-rsc] (ecmascript) <locals>");
}}),
"[project]/node_modules/file-type/node_modules/strtok3/lib/core.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "AbstractTokenizer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["AbstractTokenizer"]),
    "EndOfStreamError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["EndOfStreamError"]),
    "fromBuffer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["fromBuffer"]),
    "fromStream": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["fromStream"]),
    "fromWebStream": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["fromWebStream"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/file-type/node_modules/strtok3/lib/core.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__ = __turbopack_import__("[project]/node_modules/file-type/node_modules/strtok3/lib/core.js [app-rsc] (ecmascript) <exports>");
}}),
"[project]/node_modules/file-type/node_modules/strtok3/lib/index.js [app-rsc] (ecmascript) <exports>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "AbstractTokenizer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["AbstractTokenizer"]),
    "EndOfStreamError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["EndOfStreamError"]),
    "fromBuffer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fromBuffer"]),
    "fromFile": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$FileTokenizer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fromFile"]),
    "fromStream": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["fromStream"]),
    "fromWebStream": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fromWebStream"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$FileTokenizer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/file-type/node_modules/strtok3/lib/FileTokenizer.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/file-type/node_modules/strtok3/lib/core.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/file-type/node_modules/strtok3/lib/index.js [app-rsc] (ecmascript) <locals>");
}}),
"[project]/node_modules/file-type/node_modules/strtok3/lib/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "AbstractTokenizer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["AbstractTokenizer"]),
    "EndOfStreamError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["EndOfStreamError"]),
    "fromBuffer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["fromBuffer"]),
    "fromFile": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["fromFile"]),
    "fromStream": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["fromStream"]),
    "fromWebStream": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__["fromWebStream"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/file-type/node_modules/strtok3/lib/index.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$exports$3e$__ = __turbopack_import__("[project]/node_modules/file-type/node_modules/strtok3/lib/index.js [app-rsc] (ecmascript) <exports>");
}}),
"[project]/node_modules/file-type/util.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "stringToBytes": (()=>stringToBytes),
    "tarHeaderChecksumMatches": (()=>tarHeaderChecksumMatches),
    "uint32SyncSafeToken": (()=>uint32SyncSafeToken)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/token-types/lib/index.js [app-rsc] (ecmascript)");
;
function stringToBytes(string) {
    return [
        ...string
    ].map((character)=>character.charCodeAt(0)); // eslint-disable-line unicorn/prefer-code-point
}
function tarHeaderChecksumMatches(arrayBuffer, offset = 0) {
    const readSum = Number.parseInt(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["StringType"](6).get(arrayBuffer, 148).replace(/\0.*$/, '').trim(), 8); // Read sum in header
    if (Number.isNaN(readSum)) {
        return false;
    }
    let sum = 8 * 0x20; // Initialize signed bit sum
    for(let index = offset; index < offset + 148; index++){
        sum += arrayBuffer[index];
    }
    for(let index = offset + 156; index < offset + 512; index++){
        sum += arrayBuffer[index];
    }
    return readSum === sum;
}
const uint32SyncSafeToken = {
    get: (buffer, offset)=>buffer[offset + 3] & 0x7F | buffer[offset + 2] << 7 | buffer[offset + 1] << 14 | buffer[offset] << 21,
    len: 4
};
}}),
"[project]/node_modules/file-type/supported.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "extensions": (()=>extensions),
    "mimeTypes": (()=>mimeTypes)
});
const extensions = [
    'jpg',
    'png',
    'apng',
    'gif',
    'webp',
    'flif',
    'xcf',
    'cr2',
    'cr3',
    'orf',
    'arw',
    'dng',
    'nef',
    'rw2',
    'raf',
    'tif',
    'bmp',
    'icns',
    'jxr',
    'psd',
    'indd',
    'zip',
    'tar',
    'rar',
    'gz',
    'bz2',
    '7z',
    'dmg',
    'mp4',
    'mid',
    'mkv',
    'webm',
    'mov',
    'avi',
    'mpg',
    'mp2',
    'mp3',
    'm4a',
    'oga',
    'ogg',
    'ogv',
    'opus',
    'flac',
    'wav',
    'spx',
    'amr',
    'pdf',
    'epub',
    'elf',
    'macho',
    'exe',
    'swf',
    'rtf',
    'wasm',
    'woff',
    'woff2',
    'eot',
    'ttf',
    'otf',
    'ico',
    'flv',
    'ps',
    'xz',
    'sqlite',
    'nes',
    'crx',
    'xpi',
    'cab',
    'deb',
    'ar',
    'rpm',
    'Z',
    'lz',
    'cfb',
    'mxf',
    'mts',
    'blend',
    'bpg',
    'docx',
    'pptx',
    'xlsx',
    '3gp',
    '3g2',
    'j2c',
    'jp2',
    'jpm',
    'jpx',
    'mj2',
    'aif',
    'qcp',
    'odt',
    'ods',
    'odp',
    'xml',
    'mobi',
    'heic',
    'cur',
    'ktx',
    'ape',
    'wv',
    'dcm',
    'ics',
    'glb',
    'pcap',
    'dsf',
    'lnk',
    'alias',
    'voc',
    'ac3',
    'm4v',
    'm4p',
    'm4b',
    'f4v',
    'f4p',
    'f4b',
    'f4a',
    'mie',
    'asf',
    'ogm',
    'ogx',
    'mpc',
    'arrow',
    'shp',
    'aac',
    'mp1',
    'it',
    's3m',
    'xm',
    'ai',
    'skp',
    'avif',
    'eps',
    'lzh',
    'pgp',
    'asar',
    'stl',
    'chm',
    '3mf',
    'zst',
    'jxl',
    'vcf',
    'jls',
    'pst',
    'dwg',
    'parquet',
    'class',
    'arj',
    'cpio',
    'ace',
    'avro',
    'icc',
    'fbx',
    'vsdx'
];
const mimeTypes = [
    'image/jpeg',
    'image/png',
    'image/gif',
    'image/webp',
    'image/flif',
    'image/x-xcf',
    'image/x-canon-cr2',
    'image/x-canon-cr3',
    'image/tiff',
    'image/bmp',
    'image/vnd.ms-photo',
    'image/vnd.adobe.photoshop',
    'application/x-indesign',
    'application/epub+zip',
    'application/x-xpinstall',
    'application/vnd.oasis.opendocument.text',
    'application/vnd.oasis.opendocument.spreadsheet',
    'application/vnd.oasis.opendocument.presentation',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'application/vnd.openxmlformats-officedocument.presentationml.presentation',
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    'application/zip',
    'application/x-tar',
    'application/x-rar-compressed',
    'application/gzip',
    'application/x-bzip2',
    'application/x-7z-compressed',
    'application/x-apple-diskimage',
    'application/x-apache-arrow',
    'video/mp4',
    'audio/midi',
    'video/x-matroska',
    'video/webm',
    'video/quicktime',
    'video/vnd.avi',
    'audio/wav',
    'audio/qcelp',
    'audio/x-ms-asf',
    'video/x-ms-asf',
    'application/vnd.ms-asf',
    'video/mpeg',
    'video/3gpp',
    'audio/mpeg',
    'audio/mp4',
    'audio/opus',
    'video/ogg',
    'audio/ogg',
    'application/ogg',
    'audio/x-flac',
    'audio/ape',
    'audio/wavpack',
    'audio/amr',
    'application/pdf',
    'application/x-elf',
    'application/x-mach-binary',
    'application/x-msdownload',
    'application/x-shockwave-flash',
    'application/rtf',
    'application/wasm',
    'font/woff',
    'font/woff2',
    'application/vnd.ms-fontobject',
    'font/ttf',
    'font/otf',
    'image/x-icon',
    'video/x-flv',
    'application/postscript',
    'application/eps',
    'application/x-xz',
    'application/x-sqlite3',
    'application/x-nintendo-nes-rom',
    'application/x-google-chrome-extension',
    'application/vnd.ms-cab-compressed',
    'application/x-deb',
    'application/x-unix-archive',
    'application/x-rpm',
    'application/x-compress',
    'application/x-lzip',
    'application/x-cfb',
    'application/x-mie',
    'application/mxf',
    'video/mp2t',
    'application/x-blender',
    'image/bpg',
    'image/j2c',
    'image/jp2',
    'image/jpx',
    'image/jpm',
    'image/mj2',
    'audio/aiff',
    'application/xml',
    'application/x-mobipocket-ebook',
    'image/heif',
    'image/heif-sequence',
    'image/heic',
    'image/heic-sequence',
    'image/icns',
    'image/ktx',
    'application/dicom',
    'audio/x-musepack',
    'text/calendar',
    'text/vcard',
    'model/gltf-binary',
    'application/vnd.tcpdump.pcap',
    'audio/x-dsf',
    'application/x.ms.shortcut',
    'application/x.apple.alias',
    'audio/x-voc',
    'audio/vnd.dolby.dd-raw',
    'audio/x-m4a',
    'image/apng',
    'image/x-olympus-orf',
    'image/x-sony-arw',
    'image/x-adobe-dng',
    'image/x-nikon-nef',
    'image/x-panasonic-rw2',
    'image/x-fujifilm-raf',
    'video/x-m4v',
    'video/3gpp2',
    'application/x-esri-shape',
    'audio/aac',
    'audio/x-it',
    'audio/x-s3m',
    'audio/x-xm',
    'video/MP1S',
    'video/MP2P',
    'application/vnd.sketchup.skp',
    'image/avif',
    'application/x-lzh-compressed',
    'application/pgp-encrypted',
    'application/x-asar',
    'model/stl',
    'application/vnd.ms-htmlhelp',
    'model/3mf',
    'image/jxl',
    'application/zstd',
    'image/jls',
    'application/vnd.ms-outlook',
    'image/vnd.dwg',
    'application/x-parquet',
    'application/java-vm',
    'application/x-arj',
    'application/x-cpio',
    'application/x-ace-compressed',
    'application/avro',
    'application/vnd.iccprofile',
    'application/x.autodesk.fbx',
    'application/vnd.visio'
];
}}),
"[project]/node_modules/file-type/core.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
Primary entry point, Node.js specific entry point is index.js
*/ __turbopack_esm__({
    "FileTypeParser": (()=>FileTypeParser),
    "fileTypeFromBlob": (()=>fileTypeFromBlob),
    "fileTypeFromBuffer": (()=>fileTypeFromBuffer),
    "fileTypeFromStream": (()=>fileTypeFromStream),
    "fileTypeFromTokenizer": (()=>fileTypeFromTokenizer),
    "reasonableDetectionSizeInBytes": (()=>reasonableDetectionSizeInBytes),
    "supportedExtensions": (()=>supportedExtensions),
    "supportedMimeTypes": (()=>supportedMimeTypes)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/token-types/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/file-type/node_modules/strtok3/lib/core.js [app-rsc] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/file-type/node_modules/strtok3/lib/core.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$util$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/file-type/util.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$extras$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-extras/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$supported$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/file-type/supported.js [app-rsc] (ecmascript)");
;
;
;
;
;
const reasonableDetectionSizeInBytes = 4100; // A fair amount of file-types are detectable within this range.
async function fileTypeFromStream(stream) {
    return new FileTypeParser().fromStream(stream);
}
async function fileTypeFromBuffer(input) {
    return new FileTypeParser().fromBuffer(input);
}
async function fileTypeFromBlob(blob) {
    return new FileTypeParser().fromBlob(blob);
}
function _check(buffer, headers, options) {
    options = {
        offset: 0,
        ...options
    };
    for (const [index, header] of headers.entries()){
        // If a bitmask is set
        if (options.mask) {
            // If header doesn't equal `buf` with bits masked off
            if (header !== (options.mask[index] & buffer[index + options.offset])) {
                return false;
            }
        } else if (header !== buffer[index + options.offset]) {
            return false;
        }
    }
    return true;
}
async function fileTypeFromTokenizer(tokenizer) {
    return new FileTypeParser().fromTokenizer(tokenizer);
}
class FileTypeParser {
    constructor(options){
        this.detectors = options?.customDetectors;
        this.fromTokenizer = this.fromTokenizer.bind(this);
        this.fromBuffer = this.fromBuffer.bind(this);
        this.parse = this.parse.bind(this);
    }
    async fromTokenizer(tokenizer) {
        const initialPosition = tokenizer.position;
        for (const detector of this.detectors || []){
            const fileType = await detector(tokenizer);
            if (fileType) {
                return fileType;
            }
            if (initialPosition !== tokenizer.position) {
                return undefined; // Cannot proceed scanning of the tokenizer is at an arbitrary position
            }
        }
        return this.parse(tokenizer);
    }
    async fromBuffer(input) {
        if (!(input instanceof Uint8Array || input instanceof ArrayBuffer)) {
            throw new TypeError(`Expected the \`input\` argument to be of type \`Uint8Array\` or \`ArrayBuffer\`, got \`${typeof input}\``);
        }
        const buffer = input instanceof Uint8Array ? input : new Uint8Array(input);
        if (!(buffer?.length > 1)) {
            return;
        }
        return this.fromTokenizer(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.fromBuffer(buffer));
    }
    async fromBlob(blob) {
        return this.fromStream(blob.stream());
    }
    async fromStream(stream) {
        const tokenizer = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.fromWebStream(stream);
        try {
            return await this.fromTokenizer(tokenizer);
        } finally{
            await tokenizer.close();
        }
    }
    check(header, options) {
        return _check(this.buffer, header, options);
    }
    checkString(header, options) {
        return this.check((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$util$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["stringToBytes"])(header), options);
    }
    async parse(tokenizer) {
        this.buffer = new Uint8Array(reasonableDetectionSizeInBytes);
        // Keep reading until EOF if the file size is unknown.
        if (tokenizer.fileInfo.size === undefined) {
            tokenizer.fileInfo.size = Number.MAX_SAFE_INTEGER;
        }
        this.tokenizer = tokenizer;
        await tokenizer.peekBuffer(this.buffer, {
            length: 12,
            mayBeLess: true
        });
        // -- 2-byte signatures --
        if (this.check([
            0x42,
            0x4D
        ])) {
            return {
                ext: 'bmp',
                mime: 'image/bmp'
            };
        }
        if (this.check([
            0x0B,
            0x77
        ])) {
            return {
                ext: 'ac3',
                mime: 'audio/vnd.dolby.dd-raw'
            };
        }
        if (this.check([
            0x78,
            0x01
        ])) {
            return {
                ext: 'dmg',
                mime: 'application/x-apple-diskimage'
            };
        }
        if (this.check([
            0x4D,
            0x5A
        ])) {
            return {
                ext: 'exe',
                mime: 'application/x-msdownload'
            };
        }
        if (this.check([
            0x25,
            0x21
        ])) {
            await tokenizer.peekBuffer(this.buffer, {
                length: 24,
                mayBeLess: true
            });
            if (this.checkString('PS-Adobe-', {
                offset: 2
            }) && this.checkString(' EPSF-', {
                offset: 14
            })) {
                return {
                    ext: 'eps',
                    mime: 'application/eps'
                };
            }
            return {
                ext: 'ps',
                mime: 'application/postscript'
            };
        }
        if (this.check([
            0x1F,
            0xA0
        ]) || this.check([
            0x1F,
            0x9D
        ])) {
            return {
                ext: 'Z',
                mime: 'application/x-compress'
            };
        }
        if (this.check([
            0xC7,
            0x71
        ])) {
            return {
                ext: 'cpio',
                mime: 'application/x-cpio'
            };
        }
        if (this.check([
            0x60,
            0xEA
        ])) {
            return {
                ext: 'arj',
                mime: 'application/x-arj'
            };
        }
        // -- 3-byte signatures --
        if (this.check([
            0xEF,
            0xBB,
            0xBF
        ])) {
            // Strip off UTF-8-BOM
            this.tokenizer.ignore(3);
            return this.parse(tokenizer);
        }
        if (this.check([
            0x47,
            0x49,
            0x46
        ])) {
            return {
                ext: 'gif',
                mime: 'image/gif'
            };
        }
        if (this.check([
            0x49,
            0x49,
            0xBC
        ])) {
            return {
                ext: 'jxr',
                mime: 'image/vnd.ms-photo'
            };
        }
        if (this.check([
            0x1F,
            0x8B,
            0x8
        ])) {
            return {
                ext: 'gz',
                mime: 'application/gzip'
            };
        }
        if (this.check([
            0x42,
            0x5A,
            0x68
        ])) {
            return {
                ext: 'bz2',
                mime: 'application/x-bzip2'
            };
        }
        if (this.checkString('ID3')) {
            await tokenizer.ignore(6); // Skip ID3 header until the header size
            const id3HeaderLength = await tokenizer.readToken(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$util$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["uint32SyncSafeToken"]);
            if (tokenizer.position + id3HeaderLength > tokenizer.fileInfo.size) {
                // Guess file type based on ID3 header for backward compatibility
                return {
                    ext: 'mp3',
                    mime: 'audio/mpeg'
                };
            }
            await tokenizer.ignore(id3HeaderLength);
            return this.fromTokenizer(tokenizer); // Skip ID3 header, recursion
        }
        // Musepack, SV7
        if (this.checkString('MP+')) {
            return {
                ext: 'mpc',
                mime: 'audio/x-musepack'
            };
        }
        if ((this.buffer[0] === 0x43 || this.buffer[0] === 0x46) && this.check([
            0x57,
            0x53
        ], {
            offset: 1
        })) {
            return {
                ext: 'swf',
                mime: 'application/x-shockwave-flash'
            };
        }
        // -- 4-byte signatures --
        // Requires a sample size of 4 bytes
        if (this.check([
            0xFF,
            0xD8,
            0xFF
        ])) {
            if (this.check([
                0xF7
            ], {
                offset: 3
            })) {
                return {
                    ext: 'jls',
                    mime: 'image/jls'
                };
            }
            return {
                ext: 'jpg',
                mime: 'image/jpeg'
            };
        }
        if (this.check([
            0x4F,
            0x62,
            0x6A,
            0x01
        ])) {
            return {
                ext: 'avro',
                mime: 'application/avro'
            };
        }
        if (this.checkString('FLIF')) {
            return {
                ext: 'flif',
                mime: 'image/flif'
            };
        }
        if (this.checkString('8BPS')) {
            return {
                ext: 'psd',
                mime: 'image/vnd.adobe.photoshop'
            };
        }
        if (this.checkString('WEBP', {
            offset: 8
        })) {
            return {
                ext: 'webp',
                mime: 'image/webp'
            };
        }
        // Musepack, SV8
        if (this.checkString('MPCK')) {
            return {
                ext: 'mpc',
                mime: 'audio/x-musepack'
            };
        }
        if (this.checkString('FORM')) {
            return {
                ext: 'aif',
                mime: 'audio/aiff'
            };
        }
        if (this.checkString('icns', {
            offset: 0
        })) {
            return {
                ext: 'icns',
                mime: 'image/icns'
            };
        }
        // Zip-based file formats
        // Need to be before the `zip` check
        if (this.check([
            0x50,
            0x4B,
            0x3,
            0x4
        ])) {
            try {
                while(tokenizer.position + 30 < tokenizer.fileInfo.size){
                    await tokenizer.readBuffer(this.buffer, {
                        length: 30
                    });
                    const view = new DataView(this.buffer.buffer);
                    // https://en.wikipedia.org/wiki/Zip_(file_format)#File_headers
                    const zipHeader = {
                        compressedSize: view.getUint32(18, true),
                        uncompressedSize: view.getUint32(22, true),
                        filenameLength: view.getUint16(26, true),
                        extraFieldLength: view.getUint16(28, true)
                    };
                    zipHeader.filename = await tokenizer.readToken(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.StringType(zipHeader.filenameLength, 'utf-8'));
                    await tokenizer.ignore(zipHeader.extraFieldLength);
                    // Assumes signed `.xpi` from addons.mozilla.org
                    if (zipHeader.filename === 'META-INF/mozilla.rsa') {
                        return {
                            ext: 'xpi',
                            mime: 'application/x-xpinstall'
                        };
                    }
                    if (zipHeader.filename.endsWith('.rels') || zipHeader.filename.endsWith('.xml')) {
                        const type = zipHeader.filename.split('/')[0];
                        switch(type){
                            case '_rels':
                                break;
                            case 'word':
                                return {
                                    ext: 'docx',
                                    mime: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
                                };
                            case 'ppt':
                                return {
                                    ext: 'pptx',
                                    mime: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
                                };
                            case 'xl':
                                return {
                                    ext: 'xlsx',
                                    mime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                                };
                            case 'visio':
                                return {
                                    ext: 'vsdx',
                                    mime: 'application/vnd.visio'
                                };
                            default:
                                break;
                        }
                    }
                    if (zipHeader.filename.startsWith('xl/')) {
                        return {
                            ext: 'xlsx',
                            mime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                        };
                    }
                    if (zipHeader.filename.startsWith('3D/') && zipHeader.filename.endsWith('.model')) {
                        return {
                            ext: '3mf',
                            mime: 'model/3mf'
                        };
                    }
                    // The docx, xlsx and pptx file types extend the Office Open XML file format:
                    // https://en.wikipedia.org/wiki/Office_Open_XML_file_formats
                    // We look for:
                    // - one entry named '[Content_Types].xml' or '_rels/.rels',
                    // - one entry indicating specific type of file.
                    // MS Office, OpenOffice and LibreOffice may put the parts in different order, so the check should not rely on it.
                    if (zipHeader.filename === 'mimetype' && zipHeader.compressedSize === zipHeader.uncompressedSize) {
                        let mimeType = await tokenizer.readToken(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.StringType(zipHeader.compressedSize, 'utf-8'));
                        mimeType = mimeType.trim();
                        switch(mimeType){
                            case 'application/epub+zip':
                                return {
                                    ext: 'epub',
                                    mime: 'application/epub+zip'
                                };
                            case 'application/vnd.oasis.opendocument.text':
                                return {
                                    ext: 'odt',
                                    mime: 'application/vnd.oasis.opendocument.text'
                                };
                            case 'application/vnd.oasis.opendocument.spreadsheet':
                                return {
                                    ext: 'ods',
                                    mime: 'application/vnd.oasis.opendocument.spreadsheet'
                                };
                            case 'application/vnd.oasis.opendocument.presentation':
                                return {
                                    ext: 'odp',
                                    mime: 'application/vnd.oasis.opendocument.presentation'
                                };
                            default:
                        }
                    }
                    // Try to find next header manually when current one is corrupted
                    if (zipHeader.compressedSize === 0) {
                        let nextHeaderIndex = -1;
                        while(nextHeaderIndex < 0 && tokenizer.position < tokenizer.fileInfo.size){
                            await tokenizer.peekBuffer(this.buffer, {
                                mayBeLess: true
                            });
                            nextHeaderIndex = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$extras$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["indexOf"])(this.buffer, new Uint8Array([
                                0x50,
                                0x4B,
                                0x03,
                                0x04
                            ]));
                            // Move position to the next header if found, skip the whole buffer otherwise
                            await tokenizer.ignore(nextHeaderIndex >= 0 ? nextHeaderIndex : this.buffer.length);
                        }
                    } else {
                        await tokenizer.ignore(zipHeader.compressedSize);
                    }
                }
            } catch (error) {
                if (!(error instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.EndOfStreamError)) {
                    throw error;
                }
            }
            return {
                ext: 'zip',
                mime: 'application/zip'
            };
        }
        if (this.checkString('OggS')) {
            // This is an OGG container
            await tokenizer.ignore(28);
            const type = new Uint8Array(8);
            await tokenizer.readBuffer(type);
            // Needs to be before `ogg` check
            if (_check(type, [
                0x4F,
                0x70,
                0x75,
                0x73,
                0x48,
                0x65,
                0x61,
                0x64
            ])) {
                return {
                    ext: 'opus',
                    mime: 'audio/opus'
                };
            }
            // If ' theora' in header.
            if (_check(type, [
                0x80,
                0x74,
                0x68,
                0x65,
                0x6F,
                0x72,
                0x61
            ])) {
                return {
                    ext: 'ogv',
                    mime: 'video/ogg'
                };
            }
            // If '\x01video' in header.
            if (_check(type, [
                0x01,
                0x76,
                0x69,
                0x64,
                0x65,
                0x6F,
                0x00
            ])) {
                return {
                    ext: 'ogm',
                    mime: 'video/ogg'
                };
            }
            // If ' FLAC' in header  https://xiph.org/flac/faq.html
            if (_check(type, [
                0x7F,
                0x46,
                0x4C,
                0x41,
                0x43
            ])) {
                return {
                    ext: 'oga',
                    mime: 'audio/ogg'
                };
            }
            // 'Speex  ' in header https://en.wikipedia.org/wiki/Speex
            if (_check(type, [
                0x53,
                0x70,
                0x65,
                0x65,
                0x78,
                0x20,
                0x20
            ])) {
                return {
                    ext: 'spx',
                    mime: 'audio/ogg'
                };
            }
            // If '\x01vorbis' in header
            if (_check(type, [
                0x01,
                0x76,
                0x6F,
                0x72,
                0x62,
                0x69,
                0x73
            ])) {
                return {
                    ext: 'ogg',
                    mime: 'audio/ogg'
                };
            }
            // Default OGG container https://www.iana.org/assignments/media-types/application/ogg
            return {
                ext: 'ogx',
                mime: 'application/ogg'
            };
        }
        if (this.check([
            0x50,
            0x4B
        ]) && (this.buffer[2] === 0x3 || this.buffer[2] === 0x5 || this.buffer[2] === 0x7) && (this.buffer[3] === 0x4 || this.buffer[3] === 0x6 || this.buffer[3] === 0x8)) {
            return {
                ext: 'zip',
                mime: 'application/zip'
            };
        }
        //
        // File Type Box (https://en.wikipedia.org/wiki/ISO_base_media_file_format)
        // It's not required to be first, but it's recommended to be. Almost all ISO base media files start with `ftyp` box.
        // `ftyp` box must contain a brand major identifier, which must consist of ISO 8859-1 printable characters.
        // Here we check for 8859-1 printable characters (for simplicity, it's a mask which also catches one non-printable character).
        if (this.checkString('ftyp', {
            offset: 4
        }) && (this.buffer[8] & 0x60) !== 0x00 // Brand major, first character ASCII?
        ) {
            // They all can have MIME `video/mp4` except `application/mp4` special-case which is hard to detect.
            // For some cases, we're specific, everything else falls to `video/mp4` with `mp4` extension.
            const brandMajor = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.StringType(4, 'latin1').get(this.buffer, 8).replace('\0', ' ').trim();
            switch(brandMajor){
                case 'avif':
                case 'avis':
                    return {
                        ext: 'avif',
                        mime: 'image/avif'
                    };
                case 'mif1':
                    return {
                        ext: 'heic',
                        mime: 'image/heif'
                    };
                case 'msf1':
                    return {
                        ext: 'heic',
                        mime: 'image/heif-sequence'
                    };
                case 'heic':
                case 'heix':
                    return {
                        ext: 'heic',
                        mime: 'image/heic'
                    };
                case 'hevc':
                case 'hevx':
                    return {
                        ext: 'heic',
                        mime: 'image/heic-sequence'
                    };
                case 'qt':
                    return {
                        ext: 'mov',
                        mime: 'video/quicktime'
                    };
                case 'M4V':
                case 'M4VH':
                case 'M4VP':
                    return {
                        ext: 'm4v',
                        mime: 'video/x-m4v'
                    };
                case 'M4P':
                    return {
                        ext: 'm4p',
                        mime: 'video/mp4'
                    };
                case 'M4B':
                    return {
                        ext: 'm4b',
                        mime: 'audio/mp4'
                    };
                case 'M4A':
                    return {
                        ext: 'm4a',
                        mime: 'audio/x-m4a'
                    };
                case 'F4V':
                    return {
                        ext: 'f4v',
                        mime: 'video/mp4'
                    };
                case 'F4P':
                    return {
                        ext: 'f4p',
                        mime: 'video/mp4'
                    };
                case 'F4A':
                    return {
                        ext: 'f4a',
                        mime: 'audio/mp4'
                    };
                case 'F4B':
                    return {
                        ext: 'f4b',
                        mime: 'audio/mp4'
                    };
                case 'crx':
                    return {
                        ext: 'cr3',
                        mime: 'image/x-canon-cr3'
                    };
                default:
                    if (brandMajor.startsWith('3g')) {
                        if (brandMajor.startsWith('3g2')) {
                            return {
                                ext: '3g2',
                                mime: 'video/3gpp2'
                            };
                        }
                        return {
                            ext: '3gp',
                            mime: 'video/3gpp'
                        };
                    }
                    return {
                        ext: 'mp4',
                        mime: 'video/mp4'
                    };
            }
        }
        if (this.checkString('MThd')) {
            return {
                ext: 'mid',
                mime: 'audio/midi'
            };
        }
        if (this.checkString('wOFF') && (this.check([
            0x00,
            0x01,
            0x00,
            0x00
        ], {
            offset: 4
        }) || this.checkString('OTTO', {
            offset: 4
        }))) {
            return {
                ext: 'woff',
                mime: 'font/woff'
            };
        }
        if (this.checkString('wOF2') && (this.check([
            0x00,
            0x01,
            0x00,
            0x00
        ], {
            offset: 4
        }) || this.checkString('OTTO', {
            offset: 4
        }))) {
            return {
                ext: 'woff2',
                mime: 'font/woff2'
            };
        }
        if (this.check([
            0xD4,
            0xC3,
            0xB2,
            0xA1
        ]) || this.check([
            0xA1,
            0xB2,
            0xC3,
            0xD4
        ])) {
            return {
                ext: 'pcap',
                mime: 'application/vnd.tcpdump.pcap'
            };
        }
        // Sony DSD Stream File (DSF)
        if (this.checkString('DSD ')) {
            return {
                ext: 'dsf',
                mime: 'audio/x-dsf'
            };
        }
        if (this.checkString('LZIP')) {
            return {
                ext: 'lz',
                mime: 'application/x-lzip'
            };
        }
        if (this.checkString('fLaC')) {
            return {
                ext: 'flac',
                mime: 'audio/x-flac'
            };
        }
        if (this.check([
            0x42,
            0x50,
            0x47,
            0xFB
        ])) {
            return {
                ext: 'bpg',
                mime: 'image/bpg'
            };
        }
        if (this.checkString('wvpk')) {
            return {
                ext: 'wv',
                mime: 'audio/wavpack'
            };
        }
        if (this.checkString('%PDF')) {
            try {
                await tokenizer.ignore(1350);
                const maxBufferSize = 10 * 1024 * 1024;
                const buffer = new Uint8Array(Math.min(maxBufferSize, tokenizer.fileInfo.size));
                await tokenizer.readBuffer(buffer, {
                    mayBeLess: true
                });
                // Check if this is an Adobe Illustrator file
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$extras$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["includes"])(buffer, new TextEncoder().encode('AIPrivateData'))) {
                    return {
                        ext: 'ai',
                        mime: 'application/postscript'
                    };
                }
            } catch (error) {
                // Swallow end of stream error if file is too small for the Adobe AI check
                if (!(error instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.EndOfStreamError)) {
                    throw error;
                }
            }
            // Assume this is just a normal PDF
            return {
                ext: 'pdf',
                mime: 'application/pdf'
            };
        }
        if (this.check([
            0x00,
            0x61,
            0x73,
            0x6D
        ])) {
            return {
                ext: 'wasm',
                mime: 'application/wasm'
            };
        }
        // TIFF, little-endian type
        if (this.check([
            0x49,
            0x49
        ])) {
            const fileType = await this.readTiffHeader(false);
            if (fileType) {
                return fileType;
            }
        }
        // TIFF, big-endian type
        if (this.check([
            0x4D,
            0x4D
        ])) {
            const fileType = await this.readTiffHeader(true);
            if (fileType) {
                return fileType;
            }
        }
        if (this.checkString('MAC ')) {
            return {
                ext: 'ape',
                mime: 'audio/ape'
            };
        }
        // https://github.com/file/file/blob/master/magic/Magdir/matroska
        if (this.check([
            0x1A,
            0x45,
            0xDF,
            0xA3
        ])) {
            async function readField() {
                const msb = await tokenizer.peekNumber(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.UINT8);
                let mask = 0x80;
                let ic = 0; // 0 = A, 1 = B, 2 = C, 3 = D
                while((msb & mask) === 0 && mask !== 0){
                    ++ic;
                    mask >>= 1;
                }
                const id = new Uint8Array(ic + 1);
                await tokenizer.readBuffer(id);
                return id;
            }
            async function readElement() {
                const idField = await readField();
                const lengthField = await readField();
                lengthField[0] ^= 0x80 >> lengthField.length - 1;
                const nrLength = Math.min(6, lengthField.length); // JavaScript can max read 6 bytes integer
                const idView = new DataView(idField.buffer);
                const lengthView = new DataView(lengthField.buffer, lengthField.length - nrLength, nrLength);
                return {
                    id: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$extras$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getUintBE"])(idView),
                    len: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$extras$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getUintBE"])(lengthView)
                };
            }
            async function readChildren(children) {
                while(children > 0){
                    const element = await readElement();
                    if (element.id === 0x42_82) {
                        const rawValue = await tokenizer.readToken(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.StringType(element.len));
                        return rawValue.replaceAll(/\00.*$/g, ''); // Return DocType
                    }
                    await tokenizer.ignore(element.len); // ignore payload
                    --children;
                }
            }
            const re = await readElement();
            const docType = await readChildren(re.len);
            switch(docType){
                case 'webm':
                    return {
                        ext: 'webm',
                        mime: 'video/webm'
                    };
                case 'matroska':
                    return {
                        ext: 'mkv',
                        mime: 'video/x-matroska'
                    };
                default:
                    return;
            }
        }
        // RIFF file format which might be AVI, WAV, QCP, etc
        if (this.check([
            0x52,
            0x49,
            0x46,
            0x46
        ])) {
            if (this.check([
                0x41,
                0x56,
                0x49
            ], {
                offset: 8
            })) {
                return {
                    ext: 'avi',
                    mime: 'video/vnd.avi'
                };
            }
            if (this.check([
                0x57,
                0x41,
                0x56,
                0x45
            ], {
                offset: 8
            })) {
                return {
                    ext: 'wav',
                    mime: 'audio/wav'
                };
            }
            // QLCM, QCP file
            if (this.check([
                0x51,
                0x4C,
                0x43,
                0x4D
            ], {
                offset: 8
            })) {
                return {
                    ext: 'qcp',
                    mime: 'audio/qcelp'
                };
            }
        }
        if (this.checkString('SQLi')) {
            return {
                ext: 'sqlite',
                mime: 'application/x-sqlite3'
            };
        }
        if (this.check([
            0x4E,
            0x45,
            0x53,
            0x1A
        ])) {
            return {
                ext: 'nes',
                mime: 'application/x-nintendo-nes-rom'
            };
        }
        if (this.checkString('Cr24')) {
            return {
                ext: 'crx',
                mime: 'application/x-google-chrome-extension'
            };
        }
        if (this.checkString('MSCF') || this.checkString('ISc(')) {
            return {
                ext: 'cab',
                mime: 'application/vnd.ms-cab-compressed'
            };
        }
        if (this.check([
            0xED,
            0xAB,
            0xEE,
            0xDB
        ])) {
            return {
                ext: 'rpm',
                mime: 'application/x-rpm'
            };
        }
        if (this.check([
            0xC5,
            0xD0,
            0xD3,
            0xC6
        ])) {
            return {
                ext: 'eps',
                mime: 'application/eps'
            };
        }
        if (this.check([
            0x28,
            0xB5,
            0x2F,
            0xFD
        ])) {
            return {
                ext: 'zst',
                mime: 'application/zstd'
            };
        }
        if (this.check([
            0x7F,
            0x45,
            0x4C,
            0x46
        ])) {
            return {
                ext: 'elf',
                mime: 'application/x-elf'
            };
        }
        if (this.check([
            0x21,
            0x42,
            0x44,
            0x4E
        ])) {
            return {
                ext: 'pst',
                mime: 'application/vnd.ms-outlook'
            };
        }
        if (this.checkString('PAR1')) {
            return {
                ext: 'parquet',
                mime: 'application/x-parquet'
            };
        }
        if (this.check([
            0xCF,
            0xFA,
            0xED,
            0xFE
        ])) {
            return {
                ext: 'macho',
                mime: 'application/x-mach-binary'
            };
        }
        // -- 5-byte signatures --
        if (this.check([
            0x4F,
            0x54,
            0x54,
            0x4F,
            0x00
        ])) {
            return {
                ext: 'otf',
                mime: 'font/otf'
            };
        }
        if (this.checkString('#!AMR')) {
            return {
                ext: 'amr',
                mime: 'audio/amr'
            };
        }
        if (this.checkString('{\\rtf')) {
            return {
                ext: 'rtf',
                mime: 'application/rtf'
            };
        }
        if (this.check([
            0x46,
            0x4C,
            0x56,
            0x01
        ])) {
            return {
                ext: 'flv',
                mime: 'video/x-flv'
            };
        }
        if (this.checkString('IMPM')) {
            return {
                ext: 'it',
                mime: 'audio/x-it'
            };
        }
        if (this.checkString('-lh0-', {
            offset: 2
        }) || this.checkString('-lh1-', {
            offset: 2
        }) || this.checkString('-lh2-', {
            offset: 2
        }) || this.checkString('-lh3-', {
            offset: 2
        }) || this.checkString('-lh4-', {
            offset: 2
        }) || this.checkString('-lh5-', {
            offset: 2
        }) || this.checkString('-lh6-', {
            offset: 2
        }) || this.checkString('-lh7-', {
            offset: 2
        }) || this.checkString('-lzs-', {
            offset: 2
        }) || this.checkString('-lz4-', {
            offset: 2
        }) || this.checkString('-lz5-', {
            offset: 2
        }) || this.checkString('-lhd-', {
            offset: 2
        })) {
            return {
                ext: 'lzh',
                mime: 'application/x-lzh-compressed'
            };
        }
        // MPEG program stream (PS or MPEG-PS)
        if (this.check([
            0x00,
            0x00,
            0x01,
            0xBA
        ])) {
            //  MPEG-PS, MPEG-1 Part 1
            if (this.check([
                0x21
            ], {
                offset: 4,
                mask: [
                    0xF1
                ]
            })) {
                return {
                    ext: 'mpg',
                    mime: 'video/MP1S'
                };
            }
            // MPEG-PS, MPEG-2 Part 1
            if (this.check([
                0x44
            ], {
                offset: 4,
                mask: [
                    0xC4
                ]
            })) {
                return {
                    ext: 'mpg',
                    mime: 'video/MP2P'
                };
            }
        }
        if (this.checkString('ITSF')) {
            return {
                ext: 'chm',
                mime: 'application/vnd.ms-htmlhelp'
            };
        }
        if (this.check([
            0xCA,
            0xFE,
            0xBA,
            0xBE
        ])) {
            return {
                ext: 'class',
                mime: 'application/java-vm'
            };
        }
        // -- 6-byte signatures --
        if (this.check([
            0xFD,
            0x37,
            0x7A,
            0x58,
            0x5A,
            0x00
        ])) {
            return {
                ext: 'xz',
                mime: 'application/x-xz'
            };
        }
        if (this.checkString('<?xml ')) {
            return {
                ext: 'xml',
                mime: 'application/xml'
            };
        }
        if (this.check([
            0x37,
            0x7A,
            0xBC,
            0xAF,
            0x27,
            0x1C
        ])) {
            return {
                ext: '7z',
                mime: 'application/x-7z-compressed'
            };
        }
        if (this.check([
            0x52,
            0x61,
            0x72,
            0x21,
            0x1A,
            0x7
        ]) && (this.buffer[6] === 0x0 || this.buffer[6] === 0x1)) {
            return {
                ext: 'rar',
                mime: 'application/x-rar-compressed'
            };
        }
        if (this.checkString('solid ')) {
            return {
                ext: 'stl',
                mime: 'model/stl'
            };
        }
        if (this.checkString('AC')) {
            const version = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.StringType(4, 'latin1').get(this.buffer, 2);
            if (version.match('^d*') && version >= 1000 && version <= 1050) {
                return {
                    ext: 'dwg',
                    mime: 'image/vnd.dwg'
                };
            }
        }
        if (this.checkString('070707')) {
            return {
                ext: 'cpio',
                mime: 'application/x-cpio'
            };
        }
        // -- 7-byte signatures --
        if (this.checkString('BLENDER')) {
            return {
                ext: 'blend',
                mime: 'application/x-blender'
            };
        }
        if (this.checkString('!<arch>')) {
            await tokenizer.ignore(8);
            const string = await tokenizer.readToken(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.StringType(13, 'ascii'));
            if (string === 'debian-binary') {
                return {
                    ext: 'deb',
                    mime: 'application/x-deb'
                };
            }
            return {
                ext: 'ar',
                mime: 'application/x-unix-archive'
            };
        }
        if (this.checkString('**ACE', {
            offset: 7
        })) {
            await tokenizer.peekBuffer(this.buffer, {
                length: 14,
                mayBeLess: true
            });
            if (this.checkString('**', {
                offset: 12
            })) {
                return {
                    ext: 'ace',
                    mime: 'application/x-ace-compressed'
                };
            }
        }
        // -- 8-byte signatures --
        if (this.check([
            0x89,
            0x50,
            0x4E,
            0x47,
            0x0D,
            0x0A,
            0x1A,
            0x0A
        ])) {
            // APNG format (https://wiki.mozilla.org/APNG_Specification)
            // 1. Find the first IDAT (image data) chunk (49 44 41 54)
            // 2. Check if there is an "acTL" chunk before the IDAT one (61 63 54 4C)
            // Offset calculated as follows:
            // - 8 bytes: PNG signature
            // - 4 (length) + 4 (chunk type) + 13 (chunk data) + 4 (CRC): IHDR chunk
            await tokenizer.ignore(8); // ignore PNG signature
            async function readChunkHeader() {
                return {
                    length: await tokenizer.readToken(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.INT32_BE),
                    type: await tokenizer.readToken(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.StringType(4, 'latin1'))
                };
            }
            do {
                const chunk = await readChunkHeader();
                if (chunk.length < 0) {
                    return; // Invalid chunk length
                }
                switch(chunk.type){
                    case 'IDAT':
                        return {
                            ext: 'png',
                            mime: 'image/png'
                        };
                    case 'acTL':
                        return {
                            ext: 'apng',
                            mime: 'image/apng'
                        };
                    default:
                        await tokenizer.ignore(chunk.length + 4); // Ignore chunk-data + CRC
                }
            }while (tokenizer.position + 8 < tokenizer.fileInfo.size)
            return {
                ext: 'png',
                mime: 'image/png'
            };
        }
        if (this.check([
            0x41,
            0x52,
            0x52,
            0x4F,
            0x57,
            0x31,
            0x00,
            0x00
        ])) {
            return {
                ext: 'arrow',
                mime: 'application/x-apache-arrow'
            };
        }
        if (this.check([
            0x67,
            0x6C,
            0x54,
            0x46,
            0x02,
            0x00,
            0x00,
            0x00
        ])) {
            return {
                ext: 'glb',
                mime: 'model/gltf-binary'
            };
        }
        // `mov` format variants
        if (this.check([
            0x66,
            0x72,
            0x65,
            0x65
        ], {
            offset: 4
        }) // `free`
         || this.check([
            0x6D,
            0x64,
            0x61,
            0x74
        ], {
            offset: 4
        }) // `mdat` MJPEG
         || this.check([
            0x6D,
            0x6F,
            0x6F,
            0x76
        ], {
            offset: 4
        }) // `moov`
         || this.check([
            0x77,
            0x69,
            0x64,
            0x65
        ], {
            offset: 4
        }) // `wide`
        ) {
            return {
                ext: 'mov',
                mime: 'video/quicktime'
            };
        }
        // -- 9-byte signatures --
        if (this.check([
            0x49,
            0x49,
            0x52,
            0x4F,
            0x08,
            0x00,
            0x00,
            0x00,
            0x18
        ])) {
            return {
                ext: 'orf',
                mime: 'image/x-olympus-orf'
            };
        }
        if (this.checkString('gimp xcf ')) {
            return {
                ext: 'xcf',
                mime: 'image/x-xcf'
            };
        }
        // -- 12-byte signatures --
        if (this.check([
            0x49,
            0x49,
            0x55,
            0x00,
            0x18,
            0x00,
            0x00,
            0x00,
            0x88,
            0xE7,
            0x74,
            0xD8
        ])) {
            return {
                ext: 'rw2',
                mime: 'image/x-panasonic-rw2'
            };
        }
        // ASF_Header_Object first 80 bytes
        if (this.check([
            0x30,
            0x26,
            0xB2,
            0x75,
            0x8E,
            0x66,
            0xCF,
            0x11,
            0xA6,
            0xD9
        ])) {
            async function readHeader() {
                const guid = new Uint8Array(16);
                await tokenizer.readBuffer(guid);
                return {
                    id: guid,
                    size: Number(await tokenizer.readToken(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.UINT64_LE))
                };
            }
            await tokenizer.ignore(30);
            // Search for header should be in first 1KB of file.
            while(tokenizer.position + 24 < tokenizer.fileInfo.size){
                const header = await readHeader();
                let payload = header.size - 24;
                if (_check(header.id, [
                    0x91,
                    0x07,
                    0xDC,
                    0xB7,
                    0xB7,
                    0xA9,
                    0xCF,
                    0x11,
                    0x8E,
                    0xE6,
                    0x00,
                    0xC0,
                    0x0C,
                    0x20,
                    0x53,
                    0x65
                ])) {
                    // Sync on Stream-Properties-Object (B7DC0791-A9B7-11CF-8EE6-00C00C205365)
                    const typeId = new Uint8Array(16);
                    payload -= await tokenizer.readBuffer(typeId);
                    if (_check(typeId, [
                        0x40,
                        0x9E,
                        0x69,
                        0xF8,
                        0x4D,
                        0x5B,
                        0xCF,
                        0x11,
                        0xA8,
                        0xFD,
                        0x00,
                        0x80,
                        0x5F,
                        0x5C,
                        0x44,
                        0x2B
                    ])) {
                        // Found audio:
                        return {
                            ext: 'asf',
                            mime: 'audio/x-ms-asf'
                        };
                    }
                    if (_check(typeId, [
                        0xC0,
                        0xEF,
                        0x19,
                        0xBC,
                        0x4D,
                        0x5B,
                        0xCF,
                        0x11,
                        0xA8,
                        0xFD,
                        0x00,
                        0x80,
                        0x5F,
                        0x5C,
                        0x44,
                        0x2B
                    ])) {
                        // Found video:
                        return {
                            ext: 'asf',
                            mime: 'video/x-ms-asf'
                        };
                    }
                    break;
                }
                await tokenizer.ignore(payload);
            }
            // Default to ASF generic extension
            return {
                ext: 'asf',
                mime: 'application/vnd.ms-asf'
            };
        }
        if (this.check([
            0xAB,
            0x4B,
            0x54,
            0x58,
            0x20,
            0x31,
            0x31,
            0xBB,
            0x0D,
            0x0A,
            0x1A,
            0x0A
        ])) {
            return {
                ext: 'ktx',
                mime: 'image/ktx'
            };
        }
        if ((this.check([
            0x7E,
            0x10,
            0x04
        ]) || this.check([
            0x7E,
            0x18,
            0x04
        ])) && this.check([
            0x30,
            0x4D,
            0x49,
            0x45
        ], {
            offset: 4
        })) {
            return {
                ext: 'mie',
                mime: 'application/x-mie'
            };
        }
        if (this.check([
            0x27,
            0x0A,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00
        ], {
            offset: 2
        })) {
            return {
                ext: 'shp',
                mime: 'application/x-esri-shape'
            };
        }
        if (this.check([
            0xFF,
            0x4F,
            0xFF,
            0x51
        ])) {
            return {
                ext: 'j2c',
                mime: 'image/j2c'
            };
        }
        if (this.check([
            0x00,
            0x00,
            0x00,
            0x0C,
            0x6A,
            0x50,
            0x20,
            0x20,
            0x0D,
            0x0A,
            0x87,
            0x0A
        ])) {
            // JPEG-2000 family
            await tokenizer.ignore(20);
            const type = await tokenizer.readToken(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.StringType(4, 'ascii'));
            switch(type){
                case 'jp2 ':
                    return {
                        ext: 'jp2',
                        mime: 'image/jp2'
                    };
                case 'jpx ':
                    return {
                        ext: 'jpx',
                        mime: 'image/jpx'
                    };
                case 'jpm ':
                    return {
                        ext: 'jpm',
                        mime: 'image/jpm'
                    };
                case 'mjp2':
                    return {
                        ext: 'mj2',
                        mime: 'image/mj2'
                    };
                default:
                    return;
            }
        }
        if (this.check([
            0xFF,
            0x0A
        ]) || this.check([
            0x00,
            0x00,
            0x00,
            0x0C,
            0x4A,
            0x58,
            0x4C,
            0x20,
            0x0D,
            0x0A,
            0x87,
            0x0A
        ])) {
            return {
                ext: 'jxl',
                mime: 'image/jxl'
            };
        }
        if (this.check([
            0xFE,
            0xFF
        ])) {
            if (this.check([
                0,
                60,
                0,
                63,
                0,
                120,
                0,
                109,
                0,
                108
            ], {
                offset: 2
            })) {
                return {
                    ext: 'xml',
                    mime: 'application/xml'
                };
            }
            return undefined; // Some unknown text based format
        }
        // -- Unsafe signatures --
        if (this.check([
            0x0,
            0x0,
            0x1,
            0xBA
        ]) || this.check([
            0x0,
            0x0,
            0x1,
            0xB3
        ])) {
            return {
                ext: 'mpg',
                mime: 'video/mpeg'
            };
        }
        if (this.check([
            0x00,
            0x01,
            0x00,
            0x00,
            0x00
        ])) {
            return {
                ext: 'ttf',
                mime: 'font/ttf'
            };
        }
        if (this.check([
            0x00,
            0x00,
            0x01,
            0x00
        ])) {
            return {
                ext: 'ico',
                mime: 'image/x-icon'
            };
        }
        if (this.check([
            0x00,
            0x00,
            0x02,
            0x00
        ])) {
            return {
                ext: 'cur',
                mime: 'image/x-icon'
            };
        }
        if (this.check([
            0xD0,
            0xCF,
            0x11,
            0xE0,
            0xA1,
            0xB1,
            0x1A,
            0xE1
        ])) {
            // Detected Microsoft Compound File Binary File (MS-CFB) Format.
            return {
                ext: 'cfb',
                mime: 'application/x-cfb'
            };
        }
        // Increase sample size from 12 to 256.
        await tokenizer.peekBuffer(this.buffer, {
            length: Math.min(256, tokenizer.fileInfo.size),
            mayBeLess: true
        });
        if (this.check([
            0x61,
            0x63,
            0x73,
            0x70
        ], {
            offset: 36
        })) {
            return {
                ext: 'icc',
                mime: 'application/vnd.iccprofile'
            };
        }
        // -- 15-byte signatures --
        if (this.checkString('BEGIN:')) {
            if (this.checkString('VCARD', {
                offset: 6
            })) {
                return {
                    ext: 'vcf',
                    mime: 'text/vcard'
                };
            }
            if (this.checkString('VCALENDAR', {
                offset: 6
            })) {
                return {
                    ext: 'ics',
                    mime: 'text/calendar'
                };
            }
        }
        // `raf` is here just to keep all the raw image detectors together.
        if (this.checkString('FUJIFILMCCD-RAW')) {
            return {
                ext: 'raf',
                mime: 'image/x-fujifilm-raf'
            };
        }
        if (this.checkString('Extended Module:')) {
            return {
                ext: 'xm',
                mime: 'audio/x-xm'
            };
        }
        if (this.checkString('Creative Voice File')) {
            return {
                ext: 'voc',
                mime: 'audio/x-voc'
            };
        }
        if (this.check([
            0x04,
            0x00,
            0x00,
            0x00
        ]) && this.buffer.length >= 16) {
            const jsonSize = new DataView(this.buffer.buffer).getUint32(12, true);
            if (jsonSize > 12 && this.buffer.length >= jsonSize + 16) {
                try {
                    const header = new TextDecoder().decode(this.buffer.slice(16, jsonSize + 16));
                    const json = JSON.parse(header);
                    // Check if Pickle is ASAR
                    if (json.files) {
                        return {
                            ext: 'asar',
                            mime: 'application/x-asar'
                        };
                    }
                } catch  {}
            }
        }
        if (this.check([
            0x06,
            0x0E,
            0x2B,
            0x34,
            0x02,
            0x05,
            0x01,
            0x01,
            0x0D,
            0x01,
            0x02,
            0x01,
            0x01,
            0x02
        ])) {
            return {
                ext: 'mxf',
                mime: 'application/mxf'
            };
        }
        if (this.checkString('SCRM', {
            offset: 44
        })) {
            return {
                ext: 's3m',
                mime: 'audio/x-s3m'
            };
        }
        // Raw MPEG-2 transport stream (188-byte packets)
        if (this.check([
            0x47
        ]) && this.check([
            0x47
        ], {
            offset: 188
        })) {
            return {
                ext: 'mts',
                mime: 'video/mp2t'
            };
        }
        // Blu-ray Disc Audio-Video (BDAV) MPEG-2 transport stream has 4-byte TP_extra_header before each 188-byte packet
        if (this.check([
            0x47
        ], {
            offset: 4
        }) && this.check([
            0x47
        ], {
            offset: 196
        })) {
            return {
                ext: 'mts',
                mime: 'video/mp2t'
            };
        }
        if (this.check([
            0x42,
            0x4F,
            0x4F,
            0x4B,
            0x4D,
            0x4F,
            0x42,
            0x49
        ], {
            offset: 60
        })) {
            return {
                ext: 'mobi',
                mime: 'application/x-mobipocket-ebook'
            };
        }
        if (this.check([
            0x44,
            0x49,
            0x43,
            0x4D
        ], {
            offset: 128
        })) {
            return {
                ext: 'dcm',
                mime: 'application/dicom'
            };
        }
        if (this.check([
            0x4C,
            0x00,
            0x00,
            0x00,
            0x01,
            0x14,
            0x02,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0xC0,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x46
        ])) {
            return {
                ext: 'lnk',
                mime: 'application/x.ms.shortcut'
            };
        }
        if (this.check([
            0x62,
            0x6F,
            0x6F,
            0x6B,
            0x00,
            0x00,
            0x00,
            0x00,
            0x6D,
            0x61,
            0x72,
            0x6B,
            0x00,
            0x00,
            0x00,
            0x00
        ])) {
            return {
                ext: 'alias',
                mime: 'application/x.apple.alias'
            };
        }
        if (this.checkString('Kaydara FBX Binary  \u0000')) {
            return {
                ext: 'fbx',
                mime: 'application/x.autodesk.fbx'
            };
        }
        if (this.check([
            0x4C,
            0x50
        ], {
            offset: 34
        }) && (this.check([
            0x00,
            0x00,
            0x01
        ], {
            offset: 8
        }) || this.check([
            0x01,
            0x00,
            0x02
        ], {
            offset: 8
        }) || this.check([
            0x02,
            0x00,
            0x02
        ], {
            offset: 8
        }))) {
            return {
                ext: 'eot',
                mime: 'application/vnd.ms-fontobject'
            };
        }
        if (this.check([
            0x06,
            0x06,
            0xED,
            0xF5,
            0xD8,
            0x1D,
            0x46,
            0xE5,
            0xBD,
            0x31,
            0xEF,
            0xE7,
            0xFE,
            0x74,
            0xB7,
            0x1D
        ])) {
            return {
                ext: 'indd',
                mime: 'application/x-indesign'
            };
        }
        // Increase sample size from 256 to 512
        await tokenizer.peekBuffer(this.buffer, {
            length: Math.min(512, tokenizer.fileInfo.size),
            mayBeLess: true
        });
        // Requires a buffer size of 512 bytes
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$util$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tarHeaderChecksumMatches"])(this.buffer)) {
            return {
                ext: 'tar',
                mime: 'application/x-tar'
            };
        }
        if (this.check([
            0xFF,
            0xFE
        ])) {
            if (this.check([
                60,
                0,
                63,
                0,
                120,
                0,
                109,
                0,
                108,
                0
            ], {
                offset: 2
            })) {
                return {
                    ext: 'xml',
                    mime: 'application/xml'
                };
            }
            if (this.check([
                0xFF,
                0x0E,
                0x53,
                0x00,
                0x6B,
                0x00,
                0x65,
                0x00,
                0x74,
                0x00,
                0x63,
                0x00,
                0x68,
                0x00,
                0x55,
                0x00,
                0x70,
                0x00,
                0x20,
                0x00,
                0x4D,
                0x00,
                0x6F,
                0x00,
                0x64,
                0x00,
                0x65,
                0x00,
                0x6C,
                0x00
            ], {
                offset: 2
            })) {
                return {
                    ext: 'skp',
                    mime: 'application/vnd.sketchup.skp'
                };
            }
            return undefined; // Some text based format
        }
        if (this.checkString('-----BEGIN PGP MESSAGE-----')) {
            return {
                ext: 'pgp',
                mime: 'application/pgp-encrypted'
            };
        }
        // Check MPEG 1 or 2 Layer 3 header, or 'layer 0' for ADTS (MPEG sync-word 0xFFE)
        if (this.buffer.length >= 2 && this.check([
            0xFF,
            0xE0
        ], {
            offset: 0,
            mask: [
                0xFF,
                0xE0
            ]
        })) {
            if (this.check([
                0x10
            ], {
                offset: 1,
                mask: [
                    0x16
                ]
            })) {
                // Check for (ADTS) MPEG-2
                if (this.check([
                    0x08
                ], {
                    offset: 1,
                    mask: [
                        0x08
                    ]
                })) {
                    return {
                        ext: 'aac',
                        mime: 'audio/aac'
                    };
                }
                // Must be (ADTS) MPEG-4
                return {
                    ext: 'aac',
                    mime: 'audio/aac'
                };
            }
            // MPEG 1 or 2 Layer 3 header
            // Check for MPEG layer 3
            if (this.check([
                0x02
            ], {
                offset: 1,
                mask: [
                    0x06
                ]
            })) {
                return {
                    ext: 'mp3',
                    mime: 'audio/mpeg'
                };
            }
            // Check for MPEG layer 2
            if (this.check([
                0x04
            ], {
                offset: 1,
                mask: [
                    0x06
                ]
            })) {
                return {
                    ext: 'mp2',
                    mime: 'audio/mpeg'
                };
            }
            // Check for MPEG layer 1
            if (this.check([
                0x06
            ], {
                offset: 1,
                mask: [
                    0x06
                ]
            })) {
                return {
                    ext: 'mp1',
                    mime: 'audio/mpeg'
                };
            }
        }
    }
    async readTiffTag(bigEndian) {
        const tagId = await this.tokenizer.readToken(bigEndian ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.UINT16_BE : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.UINT16_LE);
        this.tokenizer.ignore(10);
        switch(tagId){
            case 50_341:
                return {
                    ext: 'arw',
                    mime: 'image/x-sony-arw'
                };
            case 50_706:
                return {
                    ext: 'dng',
                    mime: 'image/x-adobe-dng'
                };
            default:
        }
    }
    async readTiffIFD(bigEndian) {
        const numberOfTags = await this.tokenizer.readToken(bigEndian ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.UINT16_BE : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.UINT16_LE);
        for(let n = 0; n < numberOfTags; ++n){
            const fileType = await this.readTiffTag(bigEndian);
            if (fileType) {
                return fileType;
            }
        }
    }
    async readTiffHeader(bigEndian) {
        const version = (bigEndian ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.UINT16_BE : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.UINT16_LE).get(this.buffer, 2);
        const ifdOffset = (bigEndian ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.UINT32_BE : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.UINT32_LE).get(this.buffer, 4);
        if (version === 42) {
            // TIFF file header
            if (ifdOffset >= 6) {
                if (this.checkString('CR', {
                    offset: 8
                })) {
                    return {
                        ext: 'cr2',
                        mime: 'image/x-canon-cr2'
                    };
                }
                if (ifdOffset >= 8 && (this.check([
                    0x1C,
                    0x00,
                    0xFE,
                    0x00
                ], {
                    offset: 8
                }) || this.check([
                    0x1F,
                    0x00,
                    0x0B,
                    0x00
                ], {
                    offset: 8
                }))) {
                    return {
                        ext: 'nef',
                        mime: 'image/x-nikon-nef'
                    };
                }
            }
            await this.tokenizer.ignore(ifdOffset);
            const fileType = await this.readTiffIFD(bigEndian);
            return fileType ?? {
                ext: 'tif',
                mime: 'image/tiff'
            };
        }
        if (version === 43) {
            return {
                ext: 'tif',
                mime: 'image/tiff'
            };
        }
    }
}
const supportedExtensions = new Set(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$supported$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["extensions"]);
const supportedMimeTypes = new Set(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$supported$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["mimeTypes"]);
}}),
"[project]/node_modules/file-type/index.js [app-rsc] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
Node.js specific entry point.
*/ __turbopack_esm__({
    "NodeFileTypeParser": (()=>NodeFileTypeParser),
    "fileTypeFromFile": (()=>fileTypeFromFile),
    "fileTypeFromStream": (()=>fileTypeFromStream),
    "fileTypeStream": (()=>fileTypeStream)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$stream$2f$web__$5b$external$5d$__$28$node$3a$stream$2f$web$2c$__cjs$29$__ = __turbopack_import__("[externals]/node:stream/web [external] (node:stream/web, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/file-type/node_modules/strtok3/lib/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/file-type/core.js [app-rsc] (ecmascript)");
;
;
;
class NodeFileTypeParser extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["FileTypeParser"] {
    async fromStream(stream) {
        const tokenizer = await (stream instanceof __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$stream$2f$web__$5b$external$5d$__$28$node$3a$stream$2f$web$2c$__cjs$29$__["ReadableStream"] ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.fromWebStream(stream) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.fromStream(stream));
        try {
            return super.fromTokenizer(tokenizer);
        } finally{
            await tokenizer.close();
        }
    }
    async fromFile(path) {
        const tokenizer = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.fromFile(path);
        try {
            return await super.fromTokenizer(tokenizer);
        } finally{
            await tokenizer.close();
        }
    }
    async toDetectionStream(readableStream, options = {}) {
        const { default: stream } = await __turbopack_require__("[externals]/node:stream [external] (node:stream, cjs, async loader)")(__turbopack_import__);
        const { sampleSize = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["reasonableDetectionSizeInBytes"] } = options;
        return new Promise((resolve, reject)=>{
            readableStream.on('error', reject);
            readableStream.once('readable', ()=>{
                (async ()=>{
                    try {
                        // Set up output stream
                        const pass = new stream.PassThrough();
                        const outputStream = stream.pipeline ? stream.pipeline(readableStream, pass, ()=>{}) : readableStream.pipe(pass);
                        // Read the input stream and detect the filetype
                        const chunk = readableStream.read(sampleSize) ?? readableStream.read() ?? new Uint8Array(0);
                        try {
                            pass.fileType = await this.fromBuffer(chunk);
                        } catch (error) {
                            if (error instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$node_modules$2f$strtok3$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__.EndOfStreamError) {
                                pass.fileType = undefined;
                            } else {
                                reject(error);
                            }
                        }
                        resolve(outputStream);
                    } catch (error) {
                        reject(error);
                    }
                })();
            });
        });
    }
}
async function fileTypeFromFile(path, fileTypeOptions) {
    return new NodeFileTypeParser(fileTypeOptions).fromFile(path, fileTypeOptions);
}
async function fileTypeFromStream(stream, fileTypeOptions) {
    return new NodeFileTypeParser(fileTypeOptions).fromStream(stream);
}
async function fileTypeStream(readableStream, options = {}) {
    return new NodeFileTypeParser().toDetectionStream(readableStream, options);
}
;
}}),

};

//# sourceMappingURL=node_modules_file-type_9d412e._.js.map