module.exports = {

"[project]/node_modules/@payloadcms/db-mongodb/dist/connect.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "connect": (()=>connect)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__ = __turbopack_import__("[externals]/mongoose [external] (mongoose, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$defaultBeginTransaction$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/database/defaultBeginTransaction.js [app-rsc] (ecmascript)");
;
;
const connect = async function connect(options = {
    hotReload: false
}) {
    const { hotReload } = options;
    if (this.url === false) {
        return;
    }
    if (typeof this.url !== 'string') {
        throw new Error('Error: missing MongoDB connection URL.');
    }
    const urlToConnect = this.url;
    const connectionOptions = {
        autoIndex: true,
        ...this.connectOptions,
        useFacet: undefined
    };
    if (hotReload) {
        connectionOptions.autoIndex = false;
    }
    try {
        this.connection = (await __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["default"].connect(urlToConnect, connectionOptions)).connection;
        // If we are running a replica set with MongoDB Memory Server,
        // wait until the replica set elects a primary before proceeding
        if (this.mongoMemoryServer) {
            await new Promise((resolve)=>setTimeout(resolve, 2000));
        }
        const client = this.connection.getClient();
        if (!client.options.replicaSet) {
            this.transactionOptions = false;
            this.beginTransaction = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$defaultBeginTransaction$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["defaultBeginTransaction"])();
        }
        if (!this.mongoMemoryServer && !hotReload) {
            if (process.env.PAYLOAD_DROP_DATABASE === 'true') {
                this.payload.logger.info('---- DROPPING DATABASE ----');
                await __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["default"].connection.dropDatabase();
                this.payload.logger.info('---- DROPPED DATABASE ----');
            }
        }
        if (this.ensureIndexes) {
            await Promise.all(this.payload.config.collections.map(async (coll)=>{
                await this.collections[coll.slug]?.ensureIndexes();
            }));
        }
        if (("TURBOPACK compile-time value", "development") === 'production' && this.prodMigrations) {
            "TURBOPACK unreachable";
        }
    } catch (err) {
        this.payload.logger.error({
            err,
            msg: `Error: cannot connect to MongoDB. Details: ${err.message}`
        });
        process.exit(1);
    }
}; //# sourceMappingURL=connect.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildAndOrConditions.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "buildAndOrConditions": (()=>buildAndOrConditions)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$parseParams$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/parseParams.js [app-rsc] (ecmascript)");
;
async function buildAndOrConditions({ collectionSlug, fields, globalSlug, locale, parentIsLocalized, payload, where }) {
    const completedConditions = [];
    // Loop over all AND / OR operations and add them to the AND / OR query param
    // Operations should come through as an array
    for (const condition of where){
        // If the operation is properly formatted as an object
        if (typeof condition === 'object') {
            const result = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$parseParams$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["parseParams"])({
                collectionSlug,
                fields,
                globalSlug,
                locale,
                parentIsLocalized,
                payload,
                where: condition
            });
            if (Object.keys(result).length > 0) {
                completedConditions.push(result);
            }
        }
    }
    return completedConditions;
} //# sourceMappingURL=buildAndOrConditions.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/queries/operatorMap.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "operatorMap": (()=>operatorMap)
});
const operatorMap = {
    all: '$all',
    equals: '$eq',
    exists: '$exists',
    greater_than: '$gt',
    greater_than_equal: '$gte',
    in: '$in',
    intersects: '$geoIntersects',
    less_than: '$lt',
    less_than_equal: '$lte',
    near: '$near',
    not_equals: '$ne',
    not_in: '$nin',
    within: '$geoWithin'
}; //# sourceMappingURL=operatorMap.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/queries/sanitizeQueryValue.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "sanitizeQueryValue": (()=>sanitizeQueryValue)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__ = __turbopack_import__("[externals]/mongoose [external] (mongoose, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$createArrayFromCommaDelineated$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/utilities/createArrayFromCommaDelineated.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/fields/config/types.js [app-rsc] (ecmascript)");
;
;
;
const buildExistsQuery = (formattedValue, path, treatEmptyString = true)=>{
    if (formattedValue) {
        return {
            rawQuery: {
                $and: [
                    {
                        [path]: {
                            $exists: true
                        }
                    },
                    {
                        [path]: {
                            $ne: null
                        }
                    },
                    ...treatEmptyString ? [
                        {
                            [path]: {
                                $ne: ''
                            }
                        }
                    ] : []
                ]
            }
        };
    } else {
        return {
            rawQuery: {
                $or: [
                    {
                        [path]: {
                            $exists: false
                        }
                    },
                    {
                        [path]: {
                            $eq: null
                        }
                    },
                    ...treatEmptyString ? [
                        {
                            [path]: {
                                $eq: ''
                            }
                        }
                    ] : []
                ]
            }
        };
    }
};
// returns nestedField Field object from blocks.nestedField path because getLocalizedPaths splits them only for relationships
const getFieldFromSegments = ({ field, payload, segments })=>{
    if ('blocks' in field || 'blockReferences' in field) {
        const _field = field;
        for (const _block of _field.blockReferences ?? _field.blocks){
            const block = typeof _block === 'string' ? payload.blocks[_block] : _block;
            const field = getFieldFromSegments({
                field: block,
                payload,
                segments
            });
            if (field) {
                return field;
            }
        }
    }
    if ('fields' in field) {
        for(let i = 0; i < segments.length; i++){
            const foundField = field.flattenedFields.find((each)=>each.name === segments[i]);
            if (!foundField) {
                break;
            }
            if (foundField && segments.length - 1 === i) {
                return foundField;
            }
            segments.shift();
            return getFieldFromSegments({
                field: foundField,
                payload,
                segments
            });
        }
    }
};
const sanitizeQueryValue = ({ field, hasCustomID, locale, operator, parentIsLocalized, path, payload, val })=>{
    let formattedValue = val;
    let formattedOperator = operator;
    if ([
        'array',
        'blocks',
        'group',
        'tab'
    ].includes(field.type) && path.includes('.')) {
        const segments = path.split('.');
        segments.shift();
        const foundField = getFieldFromSegments({
            field,
            payload,
            segments
        });
        if (foundField) {
            field = foundField;
        }
    }
    // Disregard invalid _ids
    if (path === '_id') {
        if (typeof val === 'string' && val.split(',').length === 1) {
            if (!hasCustomID) {
                const isValid = __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["Types"].ObjectId.isValid(val);
                if (!isValid) {
                    return {
                        operator: formattedOperator,
                        val: undefined
                    };
                } else {
                    if ([
                        'in',
                        'not_in'
                    ].includes(operator)) {
                        formattedValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$createArrayFromCommaDelineated$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createArrayFromCommaDelineated"])(formattedValue).map((id)=>new __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["Types"].ObjectId(id));
                    } else {
                        formattedValue = new __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["Types"].ObjectId(val);
                    }
                }
            }
            if (field.type === 'number') {
                const parsedNumber = parseFloat(val);
                if (Number.isNaN(parsedNumber)) {
                    return {
                        operator: formattedOperator,
                        val: undefined
                    };
                }
            }
        } else if (Array.isArray(val) || typeof val === 'string' && val.split(',').length > 1) {
            if (typeof val === 'string') {
                formattedValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$createArrayFromCommaDelineated$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createArrayFromCommaDelineated"])(val);
            }
            formattedValue = formattedValue.reduce((formattedValues, inVal)=>{
                if (!hasCustomID) {
                    if (__TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["Types"].ObjectId.isValid(inVal)) {
                        formattedValues.push(new __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["Types"].ObjectId(inVal));
                    }
                }
                if (field.type === 'number') {
                    const parsedNumber = parseFloat(inVal);
                    if (!Number.isNaN(parsedNumber)) {
                        formattedValues.push(parsedNumber);
                    }
                } else {
                    formattedValues.push(inVal);
                }
                return formattedValues;
            }, []);
        }
    }
    // Cast incoming values as proper searchable types
    if (field.type === 'checkbox' && typeof val === 'string') {
        if (val.toLowerCase() === 'true') {
            formattedValue = true;
        }
        if (val.toLowerCase() === 'false') {
            formattedValue = false;
        }
    }
    if ([
        'all',
        'in',
        'not_in'
    ].includes(operator) && typeof formattedValue === 'string') {
        formattedValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$createArrayFromCommaDelineated$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createArrayFromCommaDelineated"])(formattedValue);
        if (field.type === 'number') {
            formattedValue = formattedValue.map((arrayVal)=>parseFloat(arrayVal));
        }
    }
    if (field.type === 'number') {
        if (typeof formattedValue === 'string' && operator !== 'exists') {
            formattedValue = Number(val);
        }
        if (operator === 'exists') {
            formattedValue = val === 'true' ? true : val === 'false' ? false : Boolean(val);
            return buildExistsQuery(formattedValue, path);
        }
    }
    if (field.type === 'date' && typeof val === 'string' && operator !== 'exists') {
        formattedValue = new Date(val);
        if (Number.isNaN(Date.parse(formattedValue))) {
            return undefined;
        }
    }
    if ([
        'relationship',
        'upload'
    ].includes(field.type)) {
        if (val === 'null') {
            formattedValue = null;
        }
        // Object equality requires the value to be the first key in the object that is being queried.
        if (operator === 'equals' && formattedValue && typeof formattedValue === 'object' && formattedValue.value && formattedValue.relationTo) {
            const { value } = formattedValue;
            const isValid = __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["Types"].ObjectId.isValid(value);
            if (isValid) {
                formattedValue.value = new __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["Types"].ObjectId(value);
            }
            let localizedPath = path;
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldShouldBeLocalized"])({
                field,
                parentIsLocalized
            }) && payload.config.localization && locale) {
                localizedPath = `${path}.${locale}`;
            }
            return {
                rawQuery: {
                    $or: [
                        {
                            [localizedPath]: {
                                $eq: {
                                    // disable auto sort
                                    /* eslint-disable */ value: formattedValue.value,
                                    relationTo: formattedValue.relationTo
                                }
                            }
                        },
                        {
                            [localizedPath]: {
                                $eq: {
                                    relationTo: formattedValue.relationTo,
                                    value: formattedValue.value
                                }
                            }
                        }
                    ]
                }
            };
        }
        const relationTo = field.relationTo;
        if ([
            'in',
            'not_in'
        ].includes(operator) && Array.isArray(formattedValue)) {
            formattedValue = formattedValue.reduce((formattedValues, inVal)=>{
                if (!inVal) {
                    return formattedValues;
                }
                if (typeof relationTo === 'string' && payload.collections[relationTo].customIDType) {
                    if (payload.collections[relationTo].customIDType === 'number') {
                        const parsedNumber = parseFloat(inVal);
                        if (!Number.isNaN(parsedNumber)) {
                            formattedValues.push(parsedNumber);
                            return formattedValues;
                        }
                    }
                    formattedValues.push(inVal);
                    return formattedValues;
                }
                if (Array.isArray(relationTo) && relationTo.some((relationTo)=>!!payload.collections[relationTo].customIDType)) {
                    if (__TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["Types"].ObjectId.isValid(inVal.toString())) {
                        formattedValues.push(new __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["Types"].ObjectId(inVal));
                    } else {
                        formattedValues.push(inVal);
                    }
                    return formattedValues;
                }
                if (__TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["Types"].ObjectId.isValid(inVal.toString())) {
                    formattedValues.push(new __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["Types"].ObjectId(inVal));
                }
                return formattedValues;
            }, []);
        }
        if ([
            'contains',
            'equals',
            'like',
            'not_equals'
        ].includes(operator) && (!Array.isArray(relationTo) || !path.endsWith('.relationTo'))) {
            if (typeof relationTo === 'string') {
                const customIDType = payload.collections[relationTo].customIDType;
                if (customIDType) {
                    if (customIDType === 'number') {
                        formattedValue = parseFloat(val);
                        if (Number.isNaN(formattedValue)) {
                            return {
                                operator: formattedOperator,
                                val: undefined
                            };
                        }
                    }
                } else {
                    if (!__TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["Types"].ObjectId.isValid(formattedValue)) {
                        return {
                            operator: formattedOperator,
                            val: undefined
                        };
                    }
                    formattedValue = new __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["Types"].ObjectId(formattedValue);
                }
            } else {
                const hasCustomIDType = relationTo.some((relationTo)=>!!payload.collections[relationTo].customIDType);
                if (hasCustomIDType) {
                    if (typeof val === 'string') {
                        const formattedNumber = Number(val);
                        formattedValue = [
                            __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["Types"].ObjectId.isValid(val) ? new __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["Types"].ObjectId(val) : val
                        ];
                        formattedOperator = operator === 'not_equals' ? 'not_in' : 'in';
                        if (!Number.isNaN(formattedNumber)) {
                            formattedValue.push(formattedNumber);
                        }
                    }
                } else {
                    if (!__TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["Types"].ObjectId.isValid(formattedValue)) {
                        return {
                            operator: formattedOperator,
                            val: undefined
                        };
                    }
                    formattedValue = new __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["Types"].ObjectId(formattedValue);
                }
            }
        }
        if (operator === 'all' && Array.isArray(relationTo) && path.endsWith('.value') && Array.isArray(formattedValue)) {
            formattedValue.forEach((v, i)=>{
                if (__TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["Types"].ObjectId.isValid(v)) {
                    formattedValue[i] = new __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["Types"].ObjectId(v);
                }
            });
        }
    }
    // Set up specific formatting necessary by operators
    if (operator === 'near') {
        let lng;
        let lat;
        let maxDistance;
        let minDistance;
        if (Array.isArray(formattedValue)) {
            ;
            [lng, lat, maxDistance, minDistance] = formattedValue;
        }
        if (typeof formattedValue === 'string') {
            ;
            [lng, lat, maxDistance, minDistance] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$createArrayFromCommaDelineated$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createArrayFromCommaDelineated"])(formattedValue);
        }
        if (lng == null || lat == null || maxDistance == null && minDistance == null) {
            formattedValue = undefined;
        } else {
            formattedValue = {
                $geometry: {
                    type: 'Point',
                    coordinates: [
                        parseFloat(lng),
                        parseFloat(lat)
                    ]
                }
            };
            if (maxDistance && !Number.isNaN(Number(maxDistance))) {
                formattedValue.$maxDistance = parseFloat(maxDistance);
            }
            if (minDistance && !Number.isNaN(Number(minDistance))) {
                formattedValue.$minDistance = parseFloat(minDistance);
            }
        }
    }
    if (operator === 'within' || operator === 'intersects') {
        formattedValue = {
            $geometry: formattedValue
        };
    }
    if (path !== '_id' || path === '_id' && hasCustomID && field.type === 'text') {
        if (operator === 'contains' && !__TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["Types"].ObjectId.isValid(formattedValue)) {
            formattedValue = {
                $options: 'i',
                $regex: formattedValue.replace(/[\\^$*+?.()|[\]{}]/g, '\\$&')
            };
        }
        if (operator === 'exists') {
            formattedValue = formattedValue === 'true' || formattedValue === true;
            // _id can't be empty string, will error Cast to ObjectId failed for value ""
            return buildExistsQuery(formattedValue, path, ![
                'relationship',
                'upload'
            ].includes(field.type));
        }
    }
    if ((path === '_id' || path === 'parent') && operator === 'like' && formattedValue.length === 24 && !hasCustomID) {
        formattedOperator = 'equals';
    }
    if (operator === 'exists') {
        formattedValue = formattedValue === 'true' || formattedValue === true;
        // Clearable fields
        if ([
            'relationship',
            'select',
            'upload'
        ].includes(field.type)) {
            if (formattedValue) {
                return {
                    rawQuery: {
                        $and: [
                            {
                                [path]: {
                                    $exists: true
                                }
                            },
                            {
                                [path]: {
                                    $ne: null
                                }
                            }
                        ]
                    }
                };
            } else {
                return {
                    rawQuery: {
                        $or: [
                            {
                                [path]: {
                                    $exists: false
                                }
                            },
                            {
                                [path]: {
                                    $eq: null
                                }
                            }
                        ]
                    }
                };
            }
        }
    }
    return {
        operator: formattedOperator,
        val: formattedValue
    };
}; //# sourceMappingURL=sanitizeQueryValue.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildSearchParams.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "buildSearchParam": (()=>buildSearchParam)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__ = __turbopack_import__("[externals]/mongoose [external] (mongoose, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$operatorMap$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/operatorMap.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$sanitizeQueryValue$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/sanitizeQueryValue.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$getLocalizedPaths$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/database/getLocalizedPaths.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$types$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/types/constants.js [app-rsc] (ecmascript)");
;
;
;
;
;
const subQueryOptions = {
    lean: true,
    limit: 50
};
async function buildSearchParam({ collectionSlug, fields, globalSlug, incomingPath, locale, operator, parentIsLocalized, payload, val }) {
    // Replace GraphQL nested field double underscore formatting
    let sanitizedPath = incomingPath.replace(/__/g, '.');
    if (sanitizedPath === 'id') {
        sanitizedPath = '_id';
    }
    let paths = [];
    let hasCustomID = false;
    if (sanitizedPath === '_id') {
        const customIDFieldType = payload.collections[collectionSlug]?.customIDType;
        let idFieldType = 'text';
        if (customIDFieldType) {
            idFieldType = customIDFieldType;
            hasCustomID = true;
        }
        paths.push({
            collectionSlug,
            complete: true,
            field: {
                name: 'id',
                type: idFieldType
            },
            parentIsLocalized,
            path: '_id'
        });
    } else {
        paths = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$getLocalizedPaths$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getLocalizedPaths"])({
            collectionSlug,
            fields,
            globalSlug,
            incomingPath: sanitizedPath,
            locale,
            parentIsLocalized,
            payload
        });
    }
    const [{ field, path }] = paths;
    if (path) {
        const sanitizedQueryValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$sanitizeQueryValue$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeQueryValue"])({
            field,
            hasCustomID,
            locale,
            operator,
            parentIsLocalized,
            path,
            payload,
            val
        });
        if (!sanitizedQueryValue) {
            return undefined;
        }
        const { operator: formattedOperator, rawQuery, val: formattedValue } = sanitizedQueryValue;
        if (rawQuery) {
            return {
                value: rawQuery
            };
        }
        // If there are multiple collections to search through,
        // Recursively build up a list of query constraints
        if (paths.length > 1) {
            // Remove top collection and reverse array
            // to work backwards from top
            const pathsToQuery = paths.slice(1).reverse();
            const initialRelationshipQuery = {
                value: {}
            };
            const relationshipQuery = await pathsToQuery.reduce(async (priorQuery, { collectionSlug: slug, path: subPath }, i)=>{
                const priorQueryResult = await priorQuery;
                const SubModel = payload.db.collections[slug];
                // On the "deepest" collection,
                // Search on the value passed through the query
                if (i === 0) {
                    const subQuery = await SubModel.buildQuery({
                        locale,
                        payload,
                        where: {
                            [subPath]: {
                                [formattedOperator]: val
                            }
                        }
                    });
                    const result = await SubModel.find(subQuery, subQueryOptions);
                    const $in = [];
                    result.forEach((doc)=>{
                        const stringID = doc._id.toString();
                        $in.push(stringID);
                        if (__TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["Types"].ObjectId.isValid(stringID)) {
                            $in.push(doc._id);
                        }
                    });
                    if (pathsToQuery.length === 1) {
                        return {
                            path,
                            value: {
                                $in
                            }
                        };
                    }
                    const nextSubPath = pathsToQuery[i + 1].path;
                    return {
                        value: {
                            [nextSubPath]: {
                                $in
                            }
                        }
                    };
                }
                const subQuery = priorQueryResult.value;
                const result = await SubModel.find(subQuery, subQueryOptions);
                const $in = result.map((doc)=>doc._id);
                // If it is the last recursion
                // then pass through the search param
                if (i + 1 === pathsToQuery.length) {
                    return {
                        path,
                        value: {
                            $in
                        }
                    };
                }
                return {
                    value: {
                        _id: {
                            $in
                        }
                    }
                };
            }, Promise.resolve(initialRelationshipQuery));
            return relationshipQuery;
        }
        if (formattedOperator && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$types$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["validOperatorSet"].has(formattedOperator)) {
            const operatorKey = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$operatorMap$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["operatorMap"][formattedOperator];
            if (field.type === 'relationship' || field.type === 'upload') {
                let hasNumberIDRelation;
                let multiIDCondition = '$or';
                if (operatorKey === '$ne') {
                    multiIDCondition = '$and';
                }
                const result = {
                    value: {
                        [multiIDCondition]: [
                            {
                                [path]: {
                                    [operatorKey]: formattedValue
                                }
                            }
                        ]
                    }
                };
                if (typeof formattedValue === 'string') {
                    if (__TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["Types"].ObjectId.isValid(formattedValue)) {
                        result.value[multiIDCondition].push({
                            [path]: {
                                [operatorKey]: new __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["Types"].ObjectId(formattedValue)
                            }
                        });
                    } else {
                        ;
                        (Array.isArray(field.relationTo) ? field.relationTo : [
                            field.relationTo
                        ]).forEach((relationTo)=>{
                            const isRelatedToCustomNumberID = payload.collections[relationTo]?.customIDType === 'number';
                            if (isRelatedToCustomNumberID) {
                                hasNumberIDRelation = true;
                            }
                        });
                        if (hasNumberIDRelation) {
                            result.value[multiIDCondition].push({
                                [path]: {
                                    [operatorKey]: parseFloat(formattedValue)
                                }
                            });
                        }
                    }
                }
                if (result.value[multiIDCondition].length > 1) {
                    return result;
                }
            }
            if (formattedOperator === 'like' && typeof formattedValue === 'string') {
                const words = formattedValue.split(' ');
                const result = {
                    value: {
                        $and: words.map((word)=>({
                                [path]: {
                                    $options: 'i',
                                    $regex: word.replace(/[\\^$*+?.()|[\]{}]/g, '\\$&')
                                }
                            }))
                    }
                };
                return result;
            }
            // Some operators like 'near' need to define a full query
            // so if there is no operator key, just return the value
            if (!operatorKey) {
                return {
                    path,
                    value: formattedValue
                };
            }
            return {
                path,
                value: {
                    [operatorKey]: formattedValue
                }
            };
        }
    }
    return undefined;
} //# sourceMappingURL=buildSearchParams.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/queries/parseParams.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "parseParams": (()=>parseParams)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildAndOrConditions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildAndOrConditions.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildSearchParams$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildSearchParams.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$types$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/types/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$deepMerge$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/payload/dist/utilities/deepMerge.js [app-rsc] (ecmascript) <locals>");
;
;
;
;
async function parseParams({ collectionSlug, fields, globalSlug, locale, parentIsLocalized, payload, where }) {
    let result = {};
    if (typeof where === 'object') {
        // We need to determine if the whereKey is an AND, OR, or a schema path
        for (const relationOrPath of Object.keys(where)){
            const condition = where[relationOrPath];
            let conditionOperator;
            if (relationOrPath.toLowerCase() === 'and') {
                conditionOperator = '$and';
            } else if (relationOrPath.toLowerCase() === 'or') {
                conditionOperator = '$or';
            }
            if (Array.isArray(condition)) {
                const builtConditions = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildAndOrConditions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildAndOrConditions"])({
                    collectionSlug,
                    fields,
                    globalSlug,
                    locale,
                    parentIsLocalized,
                    payload,
                    where: condition
                });
                if (builtConditions.length > 0) {
                    result[conditionOperator] = builtConditions;
                }
            } else {
                // It's a path - and there can be multiple comparisons on a single path.
                // For example - title like 'test' and title not equal to 'tester'
                // So we need to loop on keys again here to handle each operator independently
                const pathOperators = where[relationOrPath];
                if (typeof pathOperators === 'object') {
                    const validOperators = Object.keys(pathOperators).filter((operator)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$types$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["validOperatorSet"].has(operator));
                    for (const operator of validOperators){
                        const searchParam = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildSearchParams$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildSearchParam"])({
                            collectionSlug,
                            fields,
                            globalSlug,
                            incomingPath: relationOrPath,
                            locale,
                            operator,
                            parentIsLocalized,
                            payload,
                            val: pathOperators[operator]
                        });
                        if (searchParam?.value && searchParam?.path) {
                            if (validOperators.length > 1) {
                                if (!result.$and) {
                                    result.$and = [];
                                }
                                result.$and.push({
                                    [searchParam.path]: searchParam.value
                                });
                            } else {
                                result[searchParam.path] = searchParam.value;
                            }
                        } else if (typeof searchParam?.value === 'object') {
                            result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$deepMerge$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__["deepMergeWithCombinedArrays"])(result, searchParam.value, {
                                // dont clone Types.ObjectIDs
                                clone: false
                            });
                        }
                    }
                }
            }
        }
    }
    return result;
} //# sourceMappingURL=parseParams.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildQuery.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "buildQuery": (()=>buildQuery)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$parseParams$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/parseParams.js [app-rsc] (ecmascript)");
;
const buildQuery = async ({ adapter, collectionSlug, fields, globalSlug, locale, where })=>{
    const result = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$parseParams$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["parseParams"])({
        collectionSlug,
        fields,
        globalSlug,
        locale,
        parentIsLocalized: false,
        payload: adapter.payload,
        where
    });
    return result;
}; //# sourceMappingURL=buildQuery.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/getSession.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * returns the session belonging to the transaction of the req.session if exists
 * @returns ClientSession
 */ __turbopack_esm__({
    "getSession": (()=>getSession)
});
async function getSession(db, req) {
    if (!req) {
        return;
    }
    let transactionID = req.transactionID;
    if (transactionID instanceof Promise) {
        transactionID = await req.transactionID;
    }
    if (transactionID) {
        return db.sessions[transactionID];
    }
} //# sourceMappingURL=getSession.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/count.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "count": (()=>count)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildQuery.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/getSession.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$flattenWhereToOperators$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/database/flattenWhereToOperators.js [app-rsc] (ecmascript)");
;
;
;
const count = async function count({ collection, locale, req, where }) {
    const Model = this.collections[collection];
    const options = {
        session: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getSession"])(this, req)
    };
    let hasNearConstraint = false;
    if (where) {
        const constraints = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$flattenWhereToOperators$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["flattenWhereToOperators"])(where);
        hasNearConstraint = constraints.some((prop)=>Object.keys(prop).some((key)=>key === 'near'));
    }
    const query = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildQuery"])({
        adapter: this,
        collectionSlug: collection,
        fields: this.payload.collections[collection].config.flattenedFields,
        locale,
        where
    });
    // useEstimatedCount is faster, but not accurate, as it ignores any filters. It is thus set to true if there are no filters.
    const useEstimatedCount = hasNearConstraint || !query || Object.keys(query).length === 0;
    if (!useEstimatedCount && Object.keys(query).length === 0 && this.disableIndexHints !== true) {
        // Improve the performance of the countDocuments query which is used if useEstimatedCount is set to false by adding
        // a hint. By default, if no hint is provided, MongoDB does not use an indexed field to count the returned documents,
        // which makes queries very slow. This only happens when no query (filter) is provided. If one is provided, it uses
        // the correct indexed field
        options.hint = {
            _id: 1
        };
    }
    let result;
    if (useEstimatedCount) {
        result = await Model.estimatedDocumentCount({
            session: options.session
        });
    } else {
        result = await Model.countDocuments(query, options);
    }
    return {
        totalDocs: result
    };
}; //# sourceMappingURL=count.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/countGlobalVersions.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "countGlobalVersions": (()=>countGlobalVersions)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildQuery.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/getSession.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$flattenWhereToOperators$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/database/flattenWhereToOperators.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildGlobalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/versions/buildGlobalFields.js [app-rsc] (ecmascript)");
;
;
;
const countGlobalVersions = async function countGlobalVersions({ global, locale, req, where }) {
    const Model = this.versions[global];
    const options = {
        session: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getSession"])(this, req)
    };
    let hasNearConstraint = false;
    if (where) {
        const constraints = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$flattenWhereToOperators$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["flattenWhereToOperators"])(where);
        hasNearConstraint = constraints.some((prop)=>Object.keys(prop).some((key)=>key === 'near'));
    }
    const query = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildQuery"])({
        adapter: this,
        fields: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildGlobalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildVersionGlobalFields"])(this.payload.config, this.payload.globals.config.find((each)=>each.slug === global), true),
        locale,
        where
    });
    // useEstimatedCount is faster, but not accurate, as it ignores any filters. It is thus set to true if there are no filters.
    const useEstimatedCount = hasNearConstraint || !query || Object.keys(query).length === 0;
    if (!useEstimatedCount && Object.keys(query).length === 0 && this.disableIndexHints !== true) {
        // Improve the performance of the countDocuments query which is used if useEstimatedCount is set to false by adding
        // a hint. By default, if no hint is provided, MongoDB does not use an indexed field to count the returned documents,
        // which makes queries very slow. This only happens when no query (filter) is provided. If one is provided, it uses
        // the correct indexed field
        options.hint = {
            _id: 1
        };
    }
    let result;
    if (useEstimatedCount) {
        result = await Model.estimatedDocumentCount({
            session: options.session
        });
    } else {
        result = await Model.countDocuments(query, options);
    }
    return {
        totalDocs: result
    };
}; //# sourceMappingURL=countGlobalVersions.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/countVersions.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "countVersions": (()=>countVersions)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildQuery.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/getSession.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$flattenWhereToOperators$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/database/flattenWhereToOperators.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildCollectionFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/versions/buildCollectionFields.js [app-rsc] (ecmascript)");
;
;
;
const countVersions = async function countVersions({ collection, locale, req, where }) {
    const Model = this.versions[collection];
    const options = {
        session: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getSession"])(this, req)
    };
    let hasNearConstraint = false;
    if (where) {
        const constraints = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$flattenWhereToOperators$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["flattenWhereToOperators"])(where);
        hasNearConstraint = constraints.some((prop)=>Object.keys(prop).some((key)=>key === 'near'));
    }
    const query = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildQuery"])({
        adapter: this,
        fields: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildCollectionFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildVersionCollectionFields"])(this.payload.config, this.payload.collections[collection].config, true),
        locale,
        where
    });
    // useEstimatedCount is faster, but not accurate, as it ignores any filters. It is thus set to true if there are no filters.
    const useEstimatedCount = hasNearConstraint || !query || Object.keys(query).length === 0;
    if (!useEstimatedCount && Object.keys(query).length === 0 && this.disableIndexHints !== true) {
        // Improve the performance of the countDocuments query which is used if useEstimatedCount is set to false by adding
        // a hint. By default, if no hint is provided, MongoDB does not use an indexed field to count the returned documents,
        // which makes queries very slow. This only happens when no query (filter) is provided. If one is provided, it uses
        // the correct indexed field
        options.hint = {
            _id: 1
        };
    }
    let result;
    if (useEstimatedCount) {
        result = await Model.estimatedDocumentCount({
            session: options.session
        });
    } else {
        result = await Model.countDocuments(query, options);
    }
    return {
        totalDocs: result
    };
}; //# sourceMappingURL=countVersions.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/handleError.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "handleError": (()=>handleError)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$errors$2f$ValidationError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/errors/ValidationError.js [app-rsc] (ecmascript)");
;
const handleError = ({ collection, error, global, req })=>{
    if (!error || typeof error !== 'object') {
        throw error;
    }
    // Handle uniqueness error from MongoDB
    if ('code' in error && error.code === 11000 && 'keyValue' in error && error.keyValue) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$errors$2f$ValidationError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["ValidationError"]({
            collection,
            errors: [
                {
                    message: req?.t ? req.t('error:valueMustBeUnique') : 'Value must be unique',
                    path: Object.keys(error.keyValue)[0]
                }
            ],
            global
        }, req?.t);
    }
    throw error;
}; //# sourceMappingURL=handleError.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/sanitizeRelationshipIDs.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "sanitizeRelationshipIDs": (()=>sanitizeRelationshipIDs)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__ = __turbopack_import__("[externals]/mongoose [external] (mongoose, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/fields/config/types.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$traverseFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/utilities/traverseFields.js [app-rsc] (ecmascript)");
;
;
;
function isValidRelationObject(value) {
    return typeof value === 'object' && value !== null && 'relationTo' in value && 'value' in value;
}
const convertValue = ({ relatedCollection, value })=>{
    const customIDField = relatedCollection.fields.find((field)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldAffectsData"])(field) && field.name === 'id');
    if (customIDField) {
        return value;
    }
    try {
        return new __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["Types"].ObjectId(value);
    } catch  {
        return value;
    }
};
const sanitizeRelationship = ({ config, field, locale, ref, value })=>{
    let relatedCollection;
    let result = value;
    const hasManyRelations = typeof field.relationTo !== 'string';
    if (!hasManyRelations) {
        relatedCollection = config.collections?.find(({ slug })=>slug === field.relationTo);
    }
    if (Array.isArray(value)) {
        result = value.map((val)=>{
            // Handle has many
            if (relatedCollection && val && (typeof val === 'string' || typeof val === 'number')) {
                return convertValue({
                    relatedCollection,
                    value: val
                });
            }
            // Handle has many - polymorphic
            if (isValidRelationObject(val)) {
                const relatedCollectionForSingleValue = config.collections?.find(({ slug })=>slug === val.relationTo);
                if (relatedCollectionForSingleValue) {
                    return {
                        relationTo: val.relationTo,
                        value: convertValue({
                            relatedCollection: relatedCollectionForSingleValue,
                            value: val.value
                        })
                    };
                }
            }
            return val;
        });
    }
    // Handle has one - polymorphic
    if (isValidRelationObject(value)) {
        relatedCollection = config.collections?.find(({ slug })=>slug === value.relationTo);
        if (relatedCollection) {
            result = {
                relationTo: value.relationTo,
                value: convertValue({
                    relatedCollection,
                    value: value.value
                })
            };
        }
    }
    // Handle has one
    if (relatedCollection && value && (typeof value === 'string' || typeof value === 'number')) {
        result = convertValue({
            relatedCollection,
            value
        });
    }
    if (locale) {
        ref[locale] = result;
    } else {
        ref[field.name] = result;
    }
};
const sanitizeRelationshipIDs = ({ config, data, fields, parentIsLocalized })=>{
    const sanitize = ({ field, ref })=>{
        if (!ref || typeof ref !== 'object') {
            return;
        }
        if (field.type === 'relationship' || field.type === 'upload') {
            if (!ref[field.name]) {
                return;
            }
            // handle localized relationships
            if (config.localization && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldShouldBeLocalized"])({
                field,
                parentIsLocalized
            })) {
                const locales = config.localization.locales;
                const fieldRef = ref[field.name];
                if (typeof fieldRef !== 'object') {
                    return;
                }
                for (const { code } of locales){
                    const value = ref[field.name][code];
                    if (value) {
                        sanitizeRelationship({
                            config,
                            field,
                            locale: code,
                            ref: fieldRef,
                            value
                        });
                    }
                }
            } else {
                // handle non-localized relationships
                sanitizeRelationship({
                    config,
                    field,
                    locale: undefined,
                    ref,
                    value: ref[field.name]
                });
            }
        }
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$traverseFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["traverseFields"])({
        callback: sanitize,
        config,
        fields,
        fillEmpty: false,
        parentIsLocalized,
        ref: data
    });
    return data;
}; //# sourceMappingURL=sanitizeRelationshipIDs.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/create.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "create": (()=>create)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/getSession.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$handleError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/handleError.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeRelationshipIDs$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/sanitizeRelationshipIDs.js [app-rsc] (ecmascript)");
;
;
;
const create = async function create({ collection, data, req }) {
    const Model = this.collections[collection];
    const options = {
        session: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getSession"])(this, req)
    };
    let doc;
    const sanitizedData = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeRelationshipIDs$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeRelationshipIDs"])({
        config: this.payload.config,
        data,
        fields: this.payload.collections[collection].config.fields
    });
    if (this.payload.collections[collection].customIDType) {
        sanitizedData._id = sanitizedData.id;
    }
    try {
        ;
        [doc] = await Model.create([
            sanitizedData
        ], options);
    } catch (error) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$handleError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["handleError"])({
            collection,
            error,
            req
        });
    }
    // doc.toJSON does not do stuff like converting ObjectIds to string, or date strings to date objects. That's why we use JSON.parse/stringify here
    const result = JSON.parse(JSON.stringify(doc));
    const verificationToken = doc._verificationToken;
    // custom id type reset
    result.id = result._id;
    if (verificationToken) {
        result._verificationToken = verificationToken;
    }
    return result;
}; //# sourceMappingURL=create.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/sanitizeInternalFields.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "sanitizeInternalFields": (()=>sanitizeInternalFields)
});
const internalFields = [
    '__v'
];
const sanitizeInternalFields = (incomingDoc)=>Object.entries(incomingDoc).reduce((newDoc, [key, val])=>{
        if (key === '_id') {
            return {
                ...newDoc,
                id: val
            };
        }
        if (internalFields.indexOf(key) > -1) {
            return newDoc;
        }
        return {
            ...newDoc,
            [key]: val
        };
    }, {}); //# sourceMappingURL=sanitizeInternalFields.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/createGlobal.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "createGlobal": (()=>createGlobal)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/getSession.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeInternalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/sanitizeInternalFields.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeRelationshipIDs$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/sanitizeRelationshipIDs.js [app-rsc] (ecmascript)");
;
;
;
const createGlobal = async function createGlobal({ slug, data, req }) {
    const Model = this.globals;
    const global = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeRelationshipIDs$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeRelationshipIDs"])({
        config: this.payload.config,
        data: {
            globalType: slug,
            ...data
        },
        fields: this.payload.config.globals.find((globalConfig)=>globalConfig.slug === slug).fields
    });
    const options = {
        session: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getSession"])(this, req)
    };
    let [result] = await Model.create([
        global
    ], options);
    result = JSON.parse(JSON.stringify(result));
    // custom id type reset
    result.id = result._id;
    result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeInternalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeInternalFields"])(result);
    return result;
}; //# sourceMappingURL=createGlobal.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/createGlobalVersion.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "createGlobalVersion": (()=>createGlobalVersion)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/getSession.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeRelationshipIDs$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/sanitizeRelationshipIDs.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildGlobalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/versions/buildGlobalFields.js [app-rsc] (ecmascript)");
;
;
;
const createGlobalVersion = async function createGlobalVersion({ autosave, createdAt, globalSlug, parent, publishedLocale, req, snapshot, updatedAt, versionData }) {
    const VersionModel = this.versions[globalSlug];
    const options = {
        session: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getSession"])(this, req)
    };
    const data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeRelationshipIDs$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeRelationshipIDs"])({
        config: this.payload.config,
        data: {
            autosave,
            createdAt,
            latest: true,
            parent,
            publishedLocale,
            snapshot,
            updatedAt,
            version: versionData
        },
        fields: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildGlobalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildVersionGlobalFields"])(this.payload.config, this.payload.config.globals.find((global)=>global.slug === globalSlug))
    });
    const [doc] = await VersionModel.create([
        data
    ], options, req);
    await VersionModel.updateMany({
        $and: [
            {
                _id: {
                    $ne: doc._id
                }
            },
            {
                parent: {
                    $eq: parent
                }
            },
            {
                latest: {
                    $eq: true
                }
            }
        ]
    }, {
        $unset: {
            latest: 1
        }
    }, options);
    const result = JSON.parse(JSON.stringify(doc));
    const verificationToken = doc._verificationToken;
    // custom id type reset
    result.id = result._id;
    if (verificationToken) {
        result._verificationToken = verificationToken;
    }
    return result;
}; //# sourceMappingURL=createGlobalVersion.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/createMigration.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "createMigration": (()=>createMigration)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__ = __turbopack_import__("[externals]/fs [external] (fs, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$path__$5b$external$5d$__$28$path$2c$__cjs$29$__ = __turbopack_import__("[externals]/path [external] (path, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$url__$5b$external$5d$__$28$url$2c$__cjs$29$__ = __turbopack_import__("[externals]/url [external] (url, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$migrations$2f$getPredefinedMigration$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/database/migrations/getPredefinedMigration.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$migrations$2f$writeMigrationIndex$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/database/migrations/writeMigrationIndex.js [app-rsc] (ecmascript)");
const __TURBOPACK__import$2e$meta__ = {
    get url () {
        return `file://${__turbopack_resolve_absolute_path__("node_modules/@payloadcms/db-mongodb/dist/createMigration.js")}`;
    }
};
;
;
;
;
const migrationTemplate = ({ downSQL, imports, upSQL })=>`import {
  MigrateDownArgs,
  MigrateUpArgs,
} from '@payloadcms/db-mongodb'
${imports ?? ''}
export async function up({ payload, req, session }: MigrateUpArgs): Promise<void> {
${upSQL ?? `  // Migration code`}
}

export async function down({ payload, req, session }: MigrateDownArgs): Promise<void> {
${downSQL ?? `  // Migration code`}
}
`;
const createMigration = async function createMigration({ file, migrationName, payload, skipEmpty }) {
    const filename = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$url__$5b$external$5d$__$28$url$2c$__cjs$29$__["fileURLToPath"])(__TURBOPACK__import$2e$meta__.url);
    const dirname = __TURBOPACK__imported__module__$5b$externals$5d2f$path__$5b$external$5d$__$28$path$2c$__cjs$29$__["default"].dirname(filename);
    const dir = payload.db.migrationDir;
    if (!__TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__["default"].existsSync(dir)) {
        __TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__["default"].mkdirSync(dir);
    }
    const predefinedMigration = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$migrations$2f$getPredefinedMigration$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getPredefinedMigration"])({
        dirname,
        file,
        migrationName,
        payload
    });
    const migrationFileContent = migrationTemplate(predefinedMigration);
    const [yyymmdd, hhmmss] = new Date().toISOString().split('T');
    const formattedDate = yyymmdd.replace(/\D/g, '');
    const formattedTime = hhmmss.split('.')[0].replace(/\D/g, '');
    const timestamp = `${formattedDate}_${formattedTime}`;
    const formattedName = migrationName?.replace(/\W/g, '_');
    const fileName = migrationName ? `${timestamp}_${formattedName}.ts` : `${timestamp}_migration.ts`;
    const filePath = `${dir}/${fileName}`;
    if (!skipEmpty) {
        __TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__["default"].writeFileSync(filePath, migrationFileContent);
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$migrations$2f$writeMigrationIndex$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["writeMigrationIndex"])({
        migrationsDir: payload.db.migrationDir
    });
    payload.logger.info({
        msg: `Migration created at ${filePath}`
    });
}; //# sourceMappingURL=createMigration.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/createVersion.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "createVersion": (()=>createVersion)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__ = __turbopack_import__("[externals]/mongoose [external] (mongoose, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/getSession.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeRelationshipIDs$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/sanitizeRelationshipIDs.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildCollectionFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/versions/buildCollectionFields.js [app-rsc] (ecmascript)");
;
;
;
;
const createVersion = async function createVersion({ autosave, collectionSlug, createdAt, parent, publishedLocale, req, snapshot, updatedAt, versionData }) {
    const VersionModel = this.versions[collectionSlug];
    const options = {
        session: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getSession"])(this, req)
    };
    const data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeRelationshipIDs$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeRelationshipIDs"])({
        config: this.payload.config,
        data: {
            autosave,
            createdAt,
            latest: true,
            parent,
            publishedLocale,
            snapshot,
            updatedAt,
            version: versionData
        },
        fields: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildCollectionFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildVersionCollectionFields"])(this.payload.config, this.payload.collections[collectionSlug].config)
    });
    const [doc] = await VersionModel.create([
        data
    ], options, req);
    const parentQuery = {
        $or: [
            {
                parent: {
                    $eq: data.parent
                }
            }
        ]
    };
    if (data.parent instanceof __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["Types"].ObjectId) {
        parentQuery.$or.push({
            parent: {
                $eq: data.parent.toString()
            }
        });
    }
    await VersionModel.updateMany({
        $and: [
            {
                _id: {
                    $ne: doc._id
                }
            },
            parentQuery,
            {
                latest: {
                    $eq: true
                }
            },
            {
                updatedAt: {
                    $lt: new Date(doc.updatedAt)
                }
            }
        ]
    }, {
        $unset: {
            latest: 1
        }
    }, options);
    const result = JSON.parse(JSON.stringify(doc));
    const verificationToken = doc._verificationToken;
    // custom id type reset
    result.id = result._id;
    if (verificationToken) {
        result._verificationToken = verificationToken;
    }
    return result;
}; //# sourceMappingURL=createVersion.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/deleteMany.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "deleteMany": (()=>deleteMany)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildQuery.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/getSession.js [app-rsc] (ecmascript)");
;
;
const deleteMany = async function deleteMany({ collection, req, where }) {
    const Model = this.collections[collection];
    const options = {
        session: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getSession"])(this, req)
    };
    const query = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildQuery"])({
        adapter: this,
        collectionSlug: collection,
        fields: this.payload.collections[collection].config.flattenedFields,
        where
    });
    await Model.deleteMany(query, options);
}; //# sourceMappingURL=deleteMany.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/buildProjectionFromSelect.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "buildProjectionFromSelect": (()=>buildProjectionFromSelect)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/fields/config/types.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$deepCopyObject$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/utilities/deepCopyObject.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$getSelectMode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/utilities/getSelectMode.js [app-rsc] (ecmascript)");
;
const addFieldToProjection = ({ adapter, databaseSchemaPath, field, parentIsLocalized, projection })=>{
    const { config } = adapter.payload;
    if (parentIsLocalized && config.localization) {
        for (const locale of config.localization.localeCodes){
            const localeDatabaseSchemaPath = databaseSchemaPath.replace('<locale>', locale);
            projection[`${localeDatabaseSchemaPath}${field.name}`] = true;
        }
    } else {
        projection[`${databaseSchemaPath}${field.name}`] = true;
    }
};
const traverseFields = ({ adapter, databaseSchemaPath = '', fields, parentIsLocalized = false, projection, select, selectAllOnCurrentLevel = false, selectMode })=>{
    for (const field of fields){
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldAffectsData"])(field)) {
            if (selectMode === 'include') {
                if (select[field.name] === true || selectAllOnCurrentLevel) {
                    addFieldToProjection({
                        adapter,
                        databaseSchemaPath,
                        field,
                        parentIsLocalized,
                        projection
                    });
                    continue;
                }
                if (!select[field.name]) {
                    continue;
                }
            }
            if (selectMode === 'exclude') {
                if (typeof select[field.name] === 'undefined') {
                    addFieldToProjection({
                        adapter,
                        databaseSchemaPath,
                        field,
                        parentIsLocalized,
                        projection
                    });
                    continue;
                }
                if (select[field.name] === false) {
                    continue;
                }
            }
        }
        let fieldDatabaseSchemaPath = databaseSchemaPath;
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldAffectsData"])(field)) {
            fieldDatabaseSchemaPath = `${databaseSchemaPath}${field.name}.`;
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldShouldBeLocalized"])({
                field,
                parentIsLocalized
            })) {
                fieldDatabaseSchemaPath = `${fieldDatabaseSchemaPath}<locale>.`;
            }
        }
        switch(field.type){
            case 'array':
            case 'group':
            case 'tab':
                {
                    const fieldSelect = select[field.name];
                    if (field.type === 'array' && selectMode === 'include') {
                        fieldSelect['id'] = true;
                    }
                    traverseFields({
                        adapter,
                        databaseSchemaPath: fieldDatabaseSchemaPath,
                        fields: field.flattenedFields,
                        parentIsLocalized: parentIsLocalized || field.localized,
                        projection,
                        select: fieldSelect,
                        selectMode
                    });
                    break;
                }
            case 'blocks':
                {
                    const blocksSelect = select[field.name];
                    for (const _block of field.blockReferences ?? field.blocks){
                        const block = typeof _block === 'string' ? adapter.payload.blocks[_block] : _block;
                        if (selectMode === 'include' && blocksSelect[block.slug] === true || selectMode === 'exclude' && typeof blocksSelect[block.slug] === 'undefined') {
                            traverseFields({
                                adapter,
                                databaseSchemaPath: fieldDatabaseSchemaPath,
                                fields: block.flattenedFields,
                                parentIsLocalized: parentIsLocalized || field.localized,
                                projection,
                                select: {},
                                selectAllOnCurrentLevel: true,
                                selectMode: 'include'
                            });
                            continue;
                        }
                        let blockSelectMode = selectMode;
                        if (selectMode === 'exclude' && blocksSelect[block.slug] === false) {
                            blockSelectMode = 'include';
                        }
                        if (typeof blocksSelect[block.slug] !== 'object') {
                            blocksSelect[block.slug] = {};
                        }
                        if (blockSelectMode === 'include') {
                            blocksSelect[block.slug]['id'] = true;
                            blocksSelect[block.slug]['blockType'] = true;
                        }
                        traverseFields({
                            adapter,
                            databaseSchemaPath: fieldDatabaseSchemaPath,
                            fields: block.flattenedFields,
                            parentIsLocalized: parentIsLocalized || field.localized,
                            projection,
                            select: blocksSelect[block.slug],
                            selectMode: blockSelectMode
                        });
                    }
                    break;
                }
            default:
                break;
        }
    }
};
const buildProjectionFromSelect = ({ adapter, fields, select })=>{
    if (!select) {
        return;
    }
    const projection = {
        _id: true
    };
    traverseFields({
        adapter,
        fields,
        projection,
        // Clone to safely mutate it later
        select: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$deepCopyObject$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["deepCopyObjectSimple"])(select),
        selectMode: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$getSelectMode$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getSelectMode"])(select)
    });
    return projection;
}; //# sourceMappingURL=buildProjectionFromSelect.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/deleteOne.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "deleteOne": (()=>deleteOne)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildQuery.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildProjectionFromSelect$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/buildProjectionFromSelect.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/getSession.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeInternalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/sanitizeInternalFields.js [app-rsc] (ecmascript)");
;
;
;
;
const deleteOne = async function deleteOne({ collection, req, select, where }) {
    const Model = this.collections[collection];
    const options = {
        projection: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildProjectionFromSelect$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildProjectionFromSelect"])({
            adapter: this,
            fields: this.payload.collections[collection].config.flattenedFields,
            select
        }),
        session: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getSession"])(this, req)
    };
    const query = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildQuery"])({
        adapter: this,
        collectionSlug: collection,
        fields: this.payload.collections[collection].config.flattenedFields,
        where
    });
    const doc = await Model.findOneAndDelete(query, options)?.lean();
    if (!doc) {
        return null;
    }
    let result = JSON.parse(JSON.stringify(doc));
    // custom id type reset
    result.id = result._id;
    result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeInternalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeInternalFields"])(result);
    return result;
}; //# sourceMappingURL=deleteOne.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/deleteVersions.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "deleteVersions": (()=>deleteVersions)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildQuery.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/getSession.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildCollectionFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/versions/buildCollectionFields.js [app-rsc] (ecmascript)");
;
;
;
const deleteVersions = async function deleteVersions({ collection, locale, req, where }) {
    const VersionsModel = this.versions[collection];
    const session = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getSession"])(this, req);
    const query = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildQuery"])({
        adapter: this,
        fields: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildCollectionFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildVersionCollectionFields"])(this.payload.config, this.payload.collections[collection].config, true),
        locale,
        where
    });
    await VersionsModel.deleteMany(query, {
        session
    });
}; //# sourceMappingURL=deleteVersions.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/destroy.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "destroy": (()=>destroy)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__ = __turbopack_import__("[externals]/mongoose [external] (mongoose, cjs)");
;
const destroy = async function destroy() {
    if (this.mongoMemoryServer) {
        await this.mongoMemoryServer.stop();
    } else {
        await __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["default"].disconnect();
    }
    Object.keys(__TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["default"].models).map((model)=>__TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["default"].deleteModel(model));
}; //# sourceMappingURL=destroy.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/queries/getLocalizedSortProperty.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getLocalizedSortProperty": (()=>getLocalizedSortProperty)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/fields/config/types.js [app-rsc] (ecmascript)");
;
const getLocalizedSortProperty = ({ config, fields, locale, parentIsLocalized, result: incomingResult, segments: incomingSegments })=>{
    // If localization is not enabled, accept exactly
    // what is sent in
    if (!config.localization) {
        return incomingSegments.join('.');
    }
    const segments = [
        ...incomingSegments
    ];
    // Retrieve first segment, and remove from segments
    const firstSegment = segments.shift();
    // Attempt to find a matched field
    const matchedField = fields.find((field)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldAffectsData"])(field) && field.name === firstSegment);
    if (matchedField && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldIsPresentationalOnly"])(matchedField)) {
        let nextFields;
        let nextParentIsLocalized = parentIsLocalized;
        const remainingSegments = [
            ...segments
        ];
        let localizedSegment = matchedField.name;
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldShouldBeLocalized"])({
            field: matchedField,
            parentIsLocalized
        })) {
            // Check to see if next segment is a locale
            if (segments.length > 0) {
                const nextSegmentIsLocale = config.localization.localeCodes.includes(remainingSegments[0]);
                // If next segment is locale, remove it from remaining segments
                // and use it to localize the current segment
                if (nextSegmentIsLocale) {
                    const nextSegment = remainingSegments.shift();
                    localizedSegment = `${matchedField.name}.${nextSegment}`;
                }
            } else {
                // If no more segments, but field is localized, use default locale
                localizedSegment = `${matchedField.name}.${locale}`;
            }
        }
        // If there are subfields, pass them through
        if (matchedField.type === 'tab' || matchedField.type === 'group' || matchedField.type === 'array') {
            nextFields = matchedField.flattenedFields;
            if (!nextParentIsLocalized) {
                nextParentIsLocalized = matchedField.localized;
            }
        }
        if (matchedField.type === 'blocks') {
            nextFields = (matchedField.blockReferences ?? matchedField.blocks).reduce((flattenedBlockFields, _block)=>{
                // TODO: iterate over blocks mapped to block slug in v4, or pass through payload.blocks
                const block = typeof _block === 'string' ? config.blocks.find((b)=>b.slug === _block) : _block;
                return [
                    ...flattenedBlockFields,
                    ...block.flattenedFields.filter((blockField)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldAffectsData"])(blockField) && blockField.name !== 'blockType' && blockField.name !== 'blockName' || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldAffectsData"])(blockField))
                ];
            }, []);
        }
        const result = incomingResult ? `${incomingResult}.${localizedSegment}` : localizedSegment;
        if (nextFields) {
            return getLocalizedSortProperty({
                config,
                fields: nextFields,
                locale,
                parentIsLocalized: nextParentIsLocalized,
                result,
                segments: remainingSegments
            });
        }
        return result;
    }
    return incomingSegments.join('.');
}; //# sourceMappingURL=getLocalizedSortProperty.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildSortParam.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "buildSortParam": (()=>buildSortParam)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$getLocalizedSortProperty$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/getLocalizedSortProperty.js [app-rsc] (ecmascript)");
;
const buildSortParam = ({ config, fields, locale, parentIsLocalized, sort, timestamps })=>{
    if (!sort) {
        if (timestamps) {
            sort = '-createdAt';
        } else {
            sort = '-id';
        }
    }
    if (typeof sort === 'string') {
        sort = [
            sort
        ];
    }
    const sorting = sort.reduce((acc, item)=>{
        let sortProperty;
        let sortDirection;
        if (item.indexOf('-') === 0) {
            sortProperty = item.substring(1);
            sortDirection = 'desc';
        } else {
            sortProperty = item;
            sortDirection = 'asc';
        }
        if (sortProperty === 'id') {
            acc['_id'] = sortDirection;
            return acc;
        }
        const localizedProperty = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$getLocalizedSortProperty$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getLocalizedSortProperty"])({
            config,
            fields,
            locale,
            parentIsLocalized,
            segments: sortProperty.split('.')
        });
        acc[localizedProperty] = sortDirection;
        return acc;
    }, {});
    return sorting;
}; //# sourceMappingURL=buildSortParam.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/buildJoinAggregation.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "buildJoinAggregation": (()=>buildJoinAggregation)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildQuery.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildSortParam$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildSortParam.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/fields/config/types.js [app-rsc] (ecmascript)");
;
;
;
const buildJoinAggregation = async ({ adapter, collection, collectionConfig, joins, limit, locale, projection, query, versions })=>{
    if (Object.keys(collectionConfig.joins).length === 0 && collectionConfig.polymorphicJoins.length == 0 || joins === false) {
        return;
    }
    const joinConfig = adapter.payload.collections[collection].config.joins;
    const polymorphicJoinsConfig = adapter.payload.collections[collection].config.polymorphicJoins;
    const aggregate = [
        {
            $sort: {
                createdAt: -1
            }
        }
    ];
    if (query) {
        aggregate.push({
            $match: query
        });
    }
    if (limit) {
        aggregate.push({
            $limit: limit
        });
    }
    for (const join of polymorphicJoinsConfig){
        if (projection && !projection[join.joinPath]) {
            continue;
        }
        if (joins?.[join.joinPath] === false) {
            continue;
        }
        const { limit: limitJoin = join.field.defaultLimit ?? 10, page, sort: sortJoin = join.field.defaultSort || collectionConfig.defaultSort, where: whereJoin } = joins?.[join.joinPath] || {};
        const aggregatedFields = [];
        for (const collectionSlug of join.field.collection){
            for (const field of adapter.payload.collections[collectionSlug].config.flattenedFields){
                if (!aggregatedFields.some((eachField)=>eachField.name === field.name)) {
                    aggregatedFields.push(field);
                }
            }
        }
        const sort = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildSortParam$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildSortParam"])({
            config: adapter.payload.config,
            fields: aggregatedFields,
            locale,
            sort: sortJoin,
            timestamps: true
        });
        const $match = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildQuery"])({
            adapter,
            fields: aggregatedFields,
            locale,
            where: whereJoin
        });
        const sortProperty = Object.keys(sort)[0];
        const sortDirection = sort[sortProperty] === 'asc' ? 1 : -1;
        const projectSort = sortProperty !== '_id' && sortProperty !== 'relationTo';
        const aliases = [];
        const as = join.joinPath;
        for (const collectionSlug of join.field.collection){
            const alias = `${as}.docs.${collectionSlug}`;
            aliases.push(alias);
            aggregate.push({
                $lookup: {
                    as: alias,
                    from: adapter.collections[collectionSlug].collection.name,
                    let: {
                        root_id_: '$_id'
                    },
                    pipeline: [
                        {
                            $addFields: {
                                relationTo: {
                                    $literal: collectionSlug
                                }
                            }
                        },
                        {
                            $match: {
                                $and: [
                                    {
                                        $expr: {
                                            $eq: [
                                                `$${join.field.on}`,
                                                '$$root_id_'
                                            ]
                                        }
                                    },
                                    $match
                                ]
                            }
                        },
                        {
                            $sort: {
                                [sortProperty]: sortDirection
                            }
                        },
                        {
                            // Unfortunately, we can't use $skip here because we can lose data, instead we do $slice then
                            $limit: page ? page * limitJoin : limitJoin
                        },
                        {
                            $project: {
                                value: '$_id',
                                ...projectSort && {
                                    [sortProperty]: 1
                                },
                                relationTo: 1
                            }
                        }
                    ]
                }
            });
        }
        aggregate.push({
            $addFields: {
                [`${as}.docs`]: {
                    $concatArrays: aliases.map((alias)=>`$${alias}`)
                }
            }
        });
        aggregate.push({
            $set: {
                [`${as}.docs`]: {
                    $sortArray: {
                        input: `$${as}.docs`,
                        sortBy: {
                            [sortProperty]: sortDirection
                        }
                    }
                }
            }
        });
        const sliceValue = page ? [
            (page - 1) * limitJoin,
            limitJoin
        ] : [
            limitJoin
        ];
        aggregate.push({
            $set: {
                [`${as}.docs`]: {
                    $slice: [
                        `$${as}.docs`,
                        ...sliceValue
                    ]
                }
            }
        });
        aggregate.push({
            $addFields: {
                [`${as}.hasNextPage`]: {
                    $gt: [
                        {
                            $size: `$${as}.docs`
                        },
                        limitJoin || Number.MAX_VALUE
                    ]
                }
            }
        });
    }
    for (const slug of Object.keys(joinConfig)){
        for (const join of joinConfig[slug]){
            if (projection && !projection[join.joinPath]) {
                continue;
            }
            if (joins?.[join.joinPath] === false) {
                continue;
            }
            const { limit: limitJoin = join.field.defaultLimit ?? 10, page, sort: sortJoin = join.field.defaultSort || collectionConfig.defaultSort, where: whereJoin } = joins?.[join.joinPath] || {};
            if (Array.isArray(join.field.collection)) {
                throw new Error('Unreachable');
            }
            const joinModel = adapter.collections[join.field.collection];
            const sort = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildSortParam$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildSortParam"])({
                config: adapter.payload.config,
                fields: adapter.payload.collections[slug].config.flattenedFields,
                locale,
                sort: sortJoin,
                timestamps: true
            });
            const sortProperty = Object.keys(sort)[0];
            const sortDirection = sort[sortProperty] === 'asc' ? 1 : -1;
            const $match = await joinModel.buildQuery({
                locale,
                payload: adapter.payload,
                where: whereJoin
            });
            const pipeline = [
                {
                    $match
                },
                {
                    $sort: {
                        [sortProperty]: sortDirection
                    }
                }
            ];
            if (page) {
                pipeline.push({
                    $skip: (page - 1) * limitJoin
                });
            }
            if (limitJoin > 0) {
                pipeline.push({
                    $limit: limitJoin + 1
                });
            }
            let polymorphicSuffix = '';
            if (Array.isArray(join.targetField.relationTo)) {
                polymorphicSuffix = '.value';
            }
            if (adapter.payload.config.localization && locale === 'all') {
                adapter.payload.config.localization.localeCodes.forEach((code)=>{
                    const as = `${versions ? `version.${join.joinPath}` : join.joinPath}${code}`;
                    aggregate.push({
                        $lookup: {
                            as: `${as}.docs`,
                            foreignField: `${join.field.on}${code}${polymorphicSuffix}`,
                            from: adapter.collections[slug].collection.name,
                            localField: versions ? 'parent' : '_id',
                            pipeline
                        }
                    }, {
                        $addFields: {
                            [`${as}.docs`]: {
                                $map: {
                                    as: 'doc',
                                    in: '$$doc._id',
                                    input: `$${as}.docs`
                                }
                            },
                            [`${as}.hasNextPage`]: limitJoin ? {
                                $gt: [
                                    {
                                        $size: `$${as}.docs`
                                    },
                                    limitJoin
                                ]
                            } : false
                        }
                    });
                    if (limitJoin > 0) {
                        aggregate.push({
                            $addFields: {
                                [`${as}.docs`]: {
                                    $slice: [
                                        `$${as}.docs`,
                                        limitJoin
                                    ]
                                }
                            }
                        });
                    }
                });
            } else {
                const localeSuffix = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldShouldBeLocalized"])({
                    field: join.field,
                    parentIsLocalized: join.parentIsLocalized
                }) && adapter.payload.config.localization && locale ? `.${locale}` : '';
                const as = `${versions ? `version.${join.joinPath}` : join.joinPath}${localeSuffix}`;
                let foreignField;
                if (join.getForeignPath) {
                    foreignField = `${join.getForeignPath({
                        locale
                    })}${polymorphicSuffix}`;
                } else {
                    foreignField = `${join.field.on}${polymorphicSuffix}`;
                }
                aggregate.push({
                    $lookup: {
                        as: `${as}.docs`,
                        foreignField,
                        from: adapter.collections[slug].collection.name,
                        localField: versions ? 'parent' : '_id',
                        pipeline
                    }
                }, {
                    $addFields: {
                        [`${as}.docs`]: {
                            $map: {
                                as: 'doc',
                                in: '$$doc._id',
                                input: `$${as}.docs`
                            }
                        },
                        [`${as}.hasNextPage`]: {
                            $gt: [
                                {
                                    $size: `$${as}.docs`
                                },
                                limitJoin || Number.MAX_VALUE
                            ]
                        }
                    }
                });
                if (limitJoin > 0) {
                    aggregate.push({
                        $addFields: {
                            [`${as}.docs`]: {
                                $slice: [
                                    `$${as}.docs`,
                                    limitJoin
                                ]
                            }
                        }
                    });
                }
            }
        }
    }
    if (projection) {
        aggregate.push({
            $project: projection
        });
    }
    return aggregate;
}; //# sourceMappingURL=buildJoinAggregation.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/find.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "find": (()=>find)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildQuery.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildSortParam$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildSortParam.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildJoinAggregation$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/buildJoinAggregation.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildProjectionFromSelect$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/buildProjectionFromSelect.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/getSession.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeInternalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/sanitizeInternalFields.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$flattenWhereToOperators$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/database/flattenWhereToOperators.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
const find = async function find({ collection, joins = {}, limit = 0, locale, page, pagination, projection, req, select, sort: sortArg, where }) {
    const Model = this.collections[collection];
    const collectionConfig = this.payload.collections[collection].config;
    const session = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getSession"])(this, req);
    let hasNearConstraint = false;
    if (where) {
        const constraints = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$flattenWhereToOperators$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["flattenWhereToOperators"])(where);
        hasNearConstraint = constraints.some((prop)=>Object.keys(prop).some((key)=>key === 'near'));
    }
    let sort;
    if (!hasNearConstraint) {
        sort = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildSortParam$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildSortParam"])({
            config: this.payload.config,
            fields: collectionConfig.flattenedFields,
            locale,
            sort: sortArg || collectionConfig.defaultSort,
            timestamps: true
        });
    }
    const query = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildQuery"])({
        adapter: this,
        collectionSlug: collection,
        fields: this.payload.collections[collection].config.flattenedFields,
        locale,
        where
    });
    // useEstimatedCount is faster, but not accurate, as it ignores any filters. It is thus set to true if there are no filters.
    const useEstimatedCount = hasNearConstraint || !query || Object.keys(query).length === 0;
    const paginationOptions = {
        lean: true,
        leanWithId: true,
        options: {
            session
        },
        page,
        pagination,
        projection,
        sort,
        useEstimatedCount
    };
    if (select) {
        paginationOptions.projection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildProjectionFromSelect$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildProjectionFromSelect"])({
            adapter: this,
            fields: collectionConfig.flattenedFields,
            select
        });
    }
    if (this.collation) {
        const defaultLocale = 'en';
        paginationOptions.collation = {
            locale: locale && locale !== 'all' && locale !== '*' ? locale : defaultLocale,
            ...this.collation
        };
    }
    if (!useEstimatedCount && Object.keys(query).length === 0 && this.disableIndexHints !== true) {
        // Improve the performance of the countDocuments query which is used if useEstimatedCount is set to false by adding
        // a hint. By default, if no hint is provided, MongoDB does not use an indexed field to count the returned documents,
        // which makes queries very slow. This only happens when no query (filter) is provided. If one is provided, it uses
        // the correct indexed field
        paginationOptions.useCustomCountFn = ()=>{
            return Promise.resolve(Model.countDocuments(query, {
                hint: {
                    _id: 1
                },
                session
            }));
        };
    }
    if (limit >= 0) {
        paginationOptions.limit = limit;
        // limit must also be set here, it's ignored when pagination is false
        paginationOptions.options.limit = limit;
        // Disable pagination if limit is 0
        if (limit === 0) {
            paginationOptions.pagination = false;
        }
    }
    let result;
    const aggregate = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildJoinAggregation$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildJoinAggregation"])({
        adapter: this,
        collection,
        collectionConfig,
        joins,
        locale,
        query
    });
    // build join aggregation
    if (aggregate) {
        result = await Model.aggregatePaginate(Model.aggregate(aggregate), paginationOptions);
    } else {
        result = await Model.paginate(query, paginationOptions);
    }
    const docs = JSON.parse(JSON.stringify(result.docs));
    return {
        ...result,
        docs: docs.map((doc)=>{
            doc.id = doc._id;
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeInternalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeInternalFields"])(doc);
        })
    };
}; //# sourceMappingURL=find.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/findGlobal.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "findGlobal": (()=>findGlobal)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildQuery.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildProjectionFromSelect$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/buildProjectionFromSelect.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/getSession.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeInternalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/sanitizeInternalFields.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$combineQueries$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/database/combineQueries.js [app-rsc] (ecmascript)");
;
;
;
;
;
const findGlobal = async function findGlobal({ slug, locale, req, select, where }) {
    const Model = this.globals;
    const fields = this.payload.globals.config.find((each)=>each.slug === slug).flattenedFields;
    const options = {
        lean: true,
        select: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildProjectionFromSelect$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildProjectionFromSelect"])({
            adapter: this,
            fields,
            select
        }),
        session: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getSession"])(this, req)
    };
    const query = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildQuery"])({
        adapter: this,
        fields,
        globalSlug: slug,
        locale,
        where: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$combineQueries$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["combineQueries"])({
            globalType: {
                equals: slug
            }
        }, where)
    });
    let doc = await Model.findOne(query, {}, options);
    if (!doc) {
        return null;
    }
    if (doc._id) {
        doc.id = doc._id;
        delete doc._id;
    }
    doc = JSON.parse(JSON.stringify(doc));
    doc = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeInternalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeInternalFields"])(doc);
    return doc;
}; //# sourceMappingURL=findGlobal.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/findGlobalVersions.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "findGlobalVersions": (()=>findGlobalVersions)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildQuery.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildSortParam$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildSortParam.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildProjectionFromSelect$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/buildProjectionFromSelect.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/getSession.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeInternalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/sanitizeInternalFields.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildGlobalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/versions/buildGlobalFields.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$flattenWhereToOperators$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/database/flattenWhereToOperators.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
const findGlobalVersions = async function findGlobalVersions({ global, limit, locale, page, pagination, req, select, skip, sort: sortArg, where }) {
    const Model = this.versions[global];
    const versionFields = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildGlobalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildVersionGlobalFields"])(this.payload.config, this.payload.globals.config.find(({ slug })=>slug === global), true);
    const session = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getSession"])(this, req);
    const options = {
        limit,
        session,
        skip
    };
    let hasNearConstraint = false;
    if (where) {
        const constraints = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$flattenWhereToOperators$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["flattenWhereToOperators"])(where);
        hasNearConstraint = constraints.some((prop)=>Object.keys(prop).some((key)=>key === 'near'));
    }
    let sort;
    if (!hasNearConstraint) {
        sort = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildSortParam$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildSortParam"])({
            config: this.payload.config,
            fields: versionFields,
            locale,
            sort: sortArg || '-updatedAt',
            timestamps: true
        });
    }
    const query = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildQuery"])({
        adapter: this,
        fields: versionFields,
        locale,
        where
    });
    // useEstimatedCount is faster, but not accurate, as it ignores any filters. It is thus set to true if there are no filters.
    const useEstimatedCount = hasNearConstraint || !query || Object.keys(query).length === 0;
    const paginationOptions = {
        lean: true,
        leanWithId: true,
        limit,
        options,
        page,
        pagination,
        projection: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildProjectionFromSelect$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildProjectionFromSelect"])({
            adapter: this,
            fields: versionFields,
            select
        }),
        sort,
        useEstimatedCount
    };
    if (this.collation) {
        const defaultLocale = 'en';
        paginationOptions.collation = {
            locale: locale && locale !== 'all' && locale !== '*' ? locale : defaultLocale,
            ...this.collation
        };
    }
    if (!useEstimatedCount && Object.keys(query).length === 0 && this.disableIndexHints !== true) {
        // Improve the performance of the countDocuments query which is used if useEstimatedCount is set to false by adding
        // a hint. By default, if no hint is provided, MongoDB does not use an indexed field to count the returned documents,
        // which makes queries very slow. This only happens when no query (filter) is provided. If one is provided, it uses
        // the correct indexed field
        paginationOptions.useCustomCountFn = ()=>{
            return Promise.resolve(Model.countDocuments(query, {
                hint: {
                    _id: 1
                },
                session
            }));
        };
    }
    if (limit >= 0) {
        paginationOptions.limit = limit;
        // limit must also be set here, it's ignored when pagination is false
        paginationOptions.options.limit = limit;
        // Disable pagination if limit is 0
        if (limit === 0) {
            paginationOptions.pagination = false;
        }
    }
    const result = await Model.paginate(query, paginationOptions);
    const docs = JSON.parse(JSON.stringify(result.docs));
    return {
        ...result,
        docs: docs.map((doc)=>{
            doc.id = doc._id;
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeInternalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeInternalFields"])(doc);
        })
    };
}; //# sourceMappingURL=findGlobalVersions.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/findOne.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "findOne": (()=>findOne)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildQuery.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildJoinAggregation$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/buildJoinAggregation.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildProjectionFromSelect$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/buildProjectionFromSelect.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/getSession.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeInternalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/sanitizeInternalFields.js [app-rsc] (ecmascript)");
;
;
;
;
;
const findOne = async function findOne({ collection, joins, locale, req, select, where }) {
    const Model = this.collections[collection];
    const collectionConfig = this.payload.collections[collection].config;
    const session = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getSession"])(this, req);
    const options = {
        lean: true,
        session
    };
    const query = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildQuery"])({
        adapter: this,
        collectionSlug: collection,
        fields: collectionConfig.flattenedFields,
        locale,
        where
    });
    const projection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildProjectionFromSelect$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildProjectionFromSelect"])({
        adapter: this,
        fields: collectionConfig.flattenedFields,
        select
    });
    const aggregate = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildJoinAggregation$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildJoinAggregation"])({
        adapter: this,
        collection,
        collectionConfig,
        joins,
        limit: 1,
        locale,
        projection,
        query
    });
    let doc;
    if (aggregate) {
        ;
        [doc] = await Model.aggregate(aggregate, {
            session
        });
    } else {
        ;
        options.projection = projection;
        doc = await Model.findOne(query, {}, options);
    }
    if (!doc) {
        return null;
    }
    let result = JSON.parse(JSON.stringify(doc));
    // custom id type reset
    result.id = result._id;
    result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeInternalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeInternalFields"])(result);
    return result;
}; //# sourceMappingURL=findOne.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/findVersions.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "findVersions": (()=>findVersions)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildQuery.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildSortParam$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildSortParam.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildProjectionFromSelect$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/buildProjectionFromSelect.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/getSession.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeInternalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/sanitizeInternalFields.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$flattenWhereToOperators$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/database/flattenWhereToOperators.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildCollectionFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/versions/buildCollectionFields.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
const findVersions = async function findVersions({ collection, limit, locale, page, pagination, req = {}, select, skip, sort: sortArg, where }) {
    const Model = this.versions[collection];
    const collectionConfig = this.payload.collections[collection].config;
    const session = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getSession"])(this, req);
    const options = {
        limit,
        session,
        skip
    };
    let hasNearConstraint = false;
    if (where) {
        const constraints = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$flattenWhereToOperators$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["flattenWhereToOperators"])(where);
        hasNearConstraint = constraints.some((prop)=>Object.keys(prop).some((key)=>key === 'near'));
    }
    let sort;
    if (!hasNearConstraint) {
        sort = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildSortParam$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildSortParam"])({
            config: this.payload.config,
            fields: collectionConfig.flattenedFields,
            locale,
            sort: sortArg || '-updatedAt',
            timestamps: true
        });
    }
    const fields = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildCollectionFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildVersionCollectionFields"])(this.payload.config, collectionConfig, true);
    const query = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildQuery"])({
        adapter: this,
        fields,
        locale,
        where
    });
    // useEstimatedCount is faster, but not accurate, as it ignores any filters. It is thus set to true if there are no filters.
    const useEstimatedCount = hasNearConstraint || !query || Object.keys(query).length === 0;
    const paginationOptions = {
        lean: true,
        leanWithId: true,
        limit,
        options,
        page,
        pagination,
        projection: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildProjectionFromSelect$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildProjectionFromSelect"])({
            adapter: this,
            fields,
            select
        }),
        sort,
        useEstimatedCount
    };
    if (this.collation) {
        const defaultLocale = 'en';
        paginationOptions.collation = {
            locale: locale && locale !== 'all' && locale !== '*' ? locale : defaultLocale,
            ...this.collation
        };
    }
    if (!useEstimatedCount && Object.keys(query).length === 0 && this.disableIndexHints !== true) {
        // Improve the performance of the countDocuments query which is used if useEstimatedCount is set to false by adding
        // a hint. By default, if no hint is provided, MongoDB does not use an indexed field to count the returned documents,
        // which makes queries very slow. This only happens when no query (filter) is provided. If one is provided, it uses
        // the correct indexed field
        paginationOptions.useCustomCountFn = ()=>{
            return Promise.resolve(Model.countDocuments(query, {
                hint: {
                    _id: 1
                },
                session
            }));
        };
    }
    if (limit >= 0) {
        paginationOptions.limit = limit;
        // limit must also be set here, it's ignored when pagination is false
        paginationOptions.options.limit = limit;
        // Disable pagination if limit is 0
        if (limit === 0) {
            paginationOptions.pagination = false;
        }
    }
    const result = await Model.paginate(query, paginationOptions);
    const docs = JSON.parse(JSON.stringify(result.docs));
    return {
        ...result,
        docs: docs.map((doc)=>{
            doc.id = doc._id;
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeInternalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeInternalFields"])(doc);
        })
    };
}; //# sourceMappingURL=findVersions.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/queries/getBuildQueryPlugin.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getBuildQueryPlugin": (()=>getBuildQueryPlugin)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$parseParams$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/parseParams.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$errors$2f$QueryError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/errors/QueryError.js [app-rsc] (ecmascript)");
;
;
const getBuildQueryPlugin = ({ collectionSlug, versionsFields } = {})=>{
    return function buildQueryPlugin(schema) {
        const modifiedSchema = schema;
        async function schemaBuildQuery({ globalSlug, locale, payload, where }) {
            let fields = versionsFields;
            if (!fields) {
                if (globalSlug) {
                    const globalConfig = payload.globals.config.find(({ slug })=>slug === globalSlug);
                    fields = globalConfig.flattenedFields;
                }
                if (collectionSlug) {
                    const collectionConfig = payload.collections[collectionSlug].config;
                    fields = collectionConfig.flattenedFields;
                }
            }
            const errors = [];
            const result = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$parseParams$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["parseParams"])({
                collectionSlug,
                fields,
                globalSlug,
                locale,
                parentIsLocalized: false,
                payload,
                where
            });
            if (errors.length > 0) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$errors$2f$QueryError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["QueryError"](errors);
            }
            return result;
        }
        modifiedSchema.statics.buildQuery = schemaBuildQuery;
    };
}; //# sourceMappingURL=getBuildQueryPlugin.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/models/buildSchema.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "buildSchema": (()=>buildSchema)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__ = __turbopack_import__("[externals]/mongoose [external] (mongoose, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/fields/config/types.js [app-rsc] (ecmascript)");
;
;
/**
 * get a field's defaultValue only if defined and not dynamic so that it can be set on the field schema
 * @param field
 */ const formatDefaultValue = (field)=>typeof field.defaultValue !== 'undefined' && typeof field.defaultValue !== 'function' ? field.defaultValue : undefined;
const formatBaseSchema = ({ buildSchemaOptions, field, parentIsLocalized })=>{
    const { disableUnique, draftsEnabled, indexSortableFields } = buildSchemaOptions;
    const schema = {
        default: formatDefaultValue(field),
        index: field.index || !disableUnique && field.unique || indexSortableFields || false,
        required: false,
        unique: !disableUnique && field.unique || false
    };
    if (schema.unique && ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldShouldBeLocalized"])({
        field,
        parentIsLocalized
    }) || draftsEnabled || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldAffectsData"])(field) && field.type !== 'group' && field.type !== 'tab' && field.required !== true)) {
        schema.sparse = true;
    }
    if (field.hidden) {
        schema.hidden = true;
    }
    return schema;
};
const localizeSchema = (entity, schema, localization, parentIsLocalized)=>{
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldShouldBeLocalized"])({
        field: entity,
        parentIsLocalized
    }) && localization && Array.isArray(localization.locales)) {
        return {
            type: localization.localeCodes.reduce((localeSchema, locale)=>({
                    ...localeSchema,
                    [locale]: schema
                }), {
                _id: false
            }),
            localized: true
        };
    }
    return schema;
};
const buildSchema = (args)=>{
    const { buildSchemaOptions = {}, configFields, parentIsLocalized, payload } = args;
    const { allowIDField, options } = buildSchemaOptions;
    let fields = {};
    let schemaFields = configFields;
    if (!allowIDField) {
        const idField = schemaFields.find((field)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldAffectsData"])(field) && field.name === 'id');
        if (idField) {
            fields = {
                _id: idField.type === 'number' ? Number : String
            };
            schemaFields = schemaFields.filter((field)=>!((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldAffectsData"])(field) && field.name === 'id'));
        }
    }
    const schema = new __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["default"].Schema(fields, options);
    schemaFields.forEach((field)=>{
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldIsVirtual"])(field)) {
            return;
        }
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldIsPresentationalOnly"])(field)) {
            const addFieldSchema = fieldToSchemaMap[field.type];
            if (addFieldSchema) {
                addFieldSchema(field, schema, payload, buildSchemaOptions, parentIsLocalized);
            }
        }
    });
    return schema;
};
const fieldToSchemaMap = {
    array: (field, schema, payload, buildSchemaOptions, parentIsLocalized)=>{
        const baseSchema = {
            ...formatBaseSchema({
                buildSchemaOptions,
                field,
                parentIsLocalized
            }),
            type: [
                buildSchema({
                    buildSchemaOptions: {
                        allowIDField: true,
                        disableUnique: buildSchemaOptions.disableUnique,
                        draftsEnabled: buildSchemaOptions.draftsEnabled,
                        options: {
                            _id: false,
                            id: false,
                            minimize: false
                        }
                    },
                    configFields: field.fields,
                    parentIsLocalized: parentIsLocalized || field.localized,
                    payload
                })
            ]
        };
        schema.add({
            [field.name]: localizeSchema(field, baseSchema, payload.config.localization, parentIsLocalized)
        });
    },
    blocks: (field, schema, payload, buildSchemaOptions, parentIsLocalized)=>{
        const fieldSchema = {
            type: [
                new __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["default"].Schema({}, {
                    _id: false,
                    discriminatorKey: 'blockType'
                })
            ]
        };
        schema.add({
            [field.name]: localizeSchema(field, fieldSchema, payload.config.localization, parentIsLocalized)
        });
        (field.blockReferences ?? field.blocks).forEach((blockItem)=>{
            const blockSchema = new __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["default"].Schema({}, {
                _id: false,
                id: false
            });
            const block = typeof blockItem === 'string' ? payload.blocks[blockItem] : blockItem;
            block.fields.forEach((blockField)=>{
                const addFieldSchema = fieldToSchemaMap[blockField.type];
                if (addFieldSchema) {
                    addFieldSchema(blockField, blockSchema, payload, buildSchemaOptions, parentIsLocalized || field.localized);
                }
            });
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldShouldBeLocalized"])({
                field,
                parentIsLocalized
            }) && payload.config.localization) {
                payload.config.localization.localeCodes.forEach((localeCode)=>{
                    // @ts-expect-error Possible incorrect typing in mongoose types, this works
                    schema.path(`${field.name}.${localeCode}`).discriminator(block.slug, blockSchema);
                });
            } else {
                // @ts-expect-error Possible incorrect typing in mongoose types, this works
                schema.path(field.name).discriminator(block.slug, blockSchema);
            }
        });
    },
    checkbox: (field, schema, payload, buildSchemaOptions, parentIsLocalized)=>{
        const baseSchema = {
            ...formatBaseSchema({
                buildSchemaOptions,
                field,
                parentIsLocalized
            }),
            type: Boolean
        };
        schema.add({
            [field.name]: localizeSchema(field, baseSchema, payload.config.localization, parentIsLocalized)
        });
    },
    code: (field, schema, payload, buildSchemaOptions, parentIsLocalized)=>{
        const baseSchema = {
            ...formatBaseSchema({
                buildSchemaOptions,
                field,
                parentIsLocalized
            }),
            type: String
        };
        schema.add({
            [field.name]: localizeSchema(field, baseSchema, payload.config.localization, parentIsLocalized)
        });
    },
    collapsible: (field, schema, payload, buildSchemaOptions, parentIsLocalized)=>{
        field.fields.forEach((subField)=>{
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldIsVirtual"])(subField)) {
                return;
            }
            const addFieldSchema = fieldToSchemaMap[subField.type];
            if (addFieldSchema) {
                addFieldSchema(subField, schema, payload, buildSchemaOptions, parentIsLocalized);
            }
        });
    },
    date: (field, schema, payload, buildSchemaOptions, parentIsLocalized)=>{
        const baseSchema = {
            ...formatBaseSchema({
                buildSchemaOptions,
                field,
                parentIsLocalized
            }),
            type: Date
        };
        schema.add({
            [field.name]: localizeSchema(field, baseSchema, payload.config.localization, parentIsLocalized)
        });
    },
    email: (field, schema, payload, buildSchemaOptions, parentIsLocalized)=>{
        const baseSchema = {
            ...formatBaseSchema({
                buildSchemaOptions,
                field,
                parentIsLocalized
            }),
            type: String
        };
        schema.add({
            [field.name]: localizeSchema(field, baseSchema, payload.config.localization, parentIsLocalized)
        });
    },
    group: (field, schema, payload, buildSchemaOptions, parentIsLocalized)=>{
        const formattedBaseSchema = formatBaseSchema({
            buildSchemaOptions,
            field,
            parentIsLocalized
        });
        // carry indexSortableFields through to versions if drafts enabled
        const indexSortableFields = buildSchemaOptions.indexSortableFields && field.name === 'version' && buildSchemaOptions.draftsEnabled;
        const baseSchema = {
            ...formattedBaseSchema,
            type: buildSchema({
                buildSchemaOptions: {
                    disableUnique: buildSchemaOptions.disableUnique,
                    draftsEnabled: buildSchemaOptions.draftsEnabled,
                    indexSortableFields,
                    options: {
                        _id: false,
                        id: false,
                        minimize: false
                    }
                },
                configFields: field.fields,
                parentIsLocalized: parentIsLocalized || field.localized,
                payload
            })
        };
        schema.add({
            [field.name]: localizeSchema(field, baseSchema, payload.config.localization, parentIsLocalized)
        });
    },
    json: (field, schema, payload, buildSchemaOptions, parentIsLocalized)=>{
        const baseSchema = {
            ...formatBaseSchema({
                buildSchemaOptions,
                field,
                parentIsLocalized
            }),
            type: __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["default"].Schema.Types.Mixed
        };
        schema.add({
            [field.name]: localizeSchema(field, baseSchema, payload.config.localization, parentIsLocalized)
        });
    },
    number: (field, schema, payload, buildSchemaOptions, parentIsLocalized)=>{
        const baseSchema = {
            ...formatBaseSchema({
                buildSchemaOptions,
                field,
                parentIsLocalized
            }),
            type: field.hasMany ? [
                Number
            ] : Number
        };
        schema.add({
            [field.name]: localizeSchema(field, baseSchema, payload.config.localization, parentIsLocalized)
        });
    },
    point: (field, schema, payload, buildSchemaOptions, parentIsLocalized)=>{
        const baseSchema = {
            type: {
                type: String,
                enum: [
                    'Point'
                ],
                ...typeof field.defaultValue !== 'undefined' && {
                    default: 'Point'
                }
            },
            coordinates: {
                type: [
                    Number
                ],
                default: formatDefaultValue(field),
                required: false
            }
        };
        if (buildSchemaOptions.disableUnique && field.unique && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldShouldBeLocalized"])({
            field,
            parentIsLocalized
        })) {
            baseSchema.coordinates.sparse = true;
        }
        schema.add({
            [field.name]: localizeSchema(field, baseSchema, payload.config.localization, parentIsLocalized)
        });
        if (field.index === true || field.index === undefined) {
            const indexOptions = {};
            if (!buildSchemaOptions.disableUnique && field.unique) {
                indexOptions.sparse = true;
                indexOptions.unique = true;
            }
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldShouldBeLocalized"])({
                field,
                parentIsLocalized
            }) && payload.config.localization) {
                payload.config.localization.locales.forEach((locale)=>{
                    schema.index({
                        [`${field.name}.${locale.code}`]: '2dsphere'
                    }, indexOptions);
                });
            } else {
                schema.index({
                    [field.name]: '2dsphere'
                }, indexOptions);
            }
        }
    },
    radio: (field, schema, payload, buildSchemaOptions, parentIsLocalized)=>{
        const baseSchema = {
            ...formatBaseSchema({
                buildSchemaOptions,
                field,
                parentIsLocalized
            }),
            type: String,
            enum: field.options.map((option)=>{
                if (typeof option === 'object') {
                    return option.value;
                }
                return option;
            })
        };
        schema.add({
            [field.name]: localizeSchema(field, baseSchema, payload.config.localization, parentIsLocalized)
        });
    },
    relationship: (field, schema, payload, buildSchemaOptions, parentIsLocalized)=>{
        const hasManyRelations = Array.isArray(field.relationTo);
        let schemaToReturn = {};
        const valueType = getRelationshipValueType(field, payload);
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldShouldBeLocalized"])({
            field,
            parentIsLocalized
        }) && payload.config.localization) {
            schemaToReturn = {
                type: payload.config.localization.localeCodes.reduce((locales, locale)=>{
                    let localeSchema = {};
                    if (hasManyRelations) {
                        localeSchema = {
                            ...formatBaseSchema({
                                buildSchemaOptions,
                                field,
                                parentIsLocalized
                            }),
                            _id: false,
                            type: __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["default"].Schema.Types.Mixed,
                            relationTo: {
                                type: String,
                                enum: field.relationTo
                            },
                            value: {
                                type: valueType,
                                refPath: `${field.name}.${locale}.relationTo`
                            }
                        };
                    } else {
                        localeSchema = {
                            ...formatBaseSchema({
                                buildSchemaOptions,
                                field,
                                parentIsLocalized
                            }),
                            type: valueType,
                            ref: field.relationTo
                        };
                    }
                    return {
                        ...locales,
                        [locale]: field.hasMany ? {
                            type: [
                                localeSchema
                            ],
                            default: formatDefaultValue(field)
                        } : localeSchema
                    };
                }, {}),
                localized: true
            };
        } else if (hasManyRelations) {
            schemaToReturn = {
                ...formatBaseSchema({
                    buildSchemaOptions,
                    field,
                    parentIsLocalized
                }),
                _id: false,
                type: __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["default"].Schema.Types.Mixed,
                relationTo: {
                    type: String,
                    enum: field.relationTo
                },
                value: {
                    type: valueType,
                    refPath: `${field.name}.relationTo`
                }
            };
            if (field.hasMany) {
                schemaToReturn = {
                    type: [
                        schemaToReturn
                    ],
                    default: formatDefaultValue(field)
                };
            }
        } else {
            schemaToReturn = {
                ...formatBaseSchema({
                    buildSchemaOptions,
                    field,
                    parentIsLocalized
                }),
                type: valueType,
                ref: field.relationTo
            };
            if (field.hasMany) {
                schemaToReturn = {
                    type: [
                        schemaToReturn
                    ],
                    default: formatDefaultValue(field)
                };
            }
        }
        schema.add({
            [field.name]: schemaToReturn
        });
    },
    richText: (field, schema, payload, buildSchemaOptions, parentIsLocalized)=>{
        const baseSchema = {
            ...formatBaseSchema({
                buildSchemaOptions,
                field,
                parentIsLocalized
            }),
            type: __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["default"].Schema.Types.Mixed
        };
        schema.add({
            [field.name]: localizeSchema(field, baseSchema, payload.config.localization, parentIsLocalized)
        });
    },
    row: (field, schema, payload, buildSchemaOptions, parentIsLocalized)=>{
        field.fields.forEach((subField)=>{
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldIsVirtual"])(subField)) {
                return;
            }
            const addFieldSchema = fieldToSchemaMap[subField.type];
            if (addFieldSchema) {
                addFieldSchema(subField, schema, payload, buildSchemaOptions, parentIsLocalized);
            }
        });
    },
    select: (field, schema, payload, buildSchemaOptions, parentIsLocalized)=>{
        const baseSchema = {
            ...formatBaseSchema({
                buildSchemaOptions,
                field,
                parentIsLocalized
            }),
            type: String,
            enum: field.options.map((option)=>{
                if (typeof option === 'object') {
                    return option.value;
                }
                return option;
            })
        };
        if (buildSchemaOptions.draftsEnabled || !field.required) {
            baseSchema.enum.push(null);
        }
        schema.add({
            [field.name]: localizeSchema(field, field.hasMany ? [
                baseSchema
            ] : baseSchema, payload.config.localization, parentIsLocalized)
        });
    },
    tabs: (field, schema, payload, buildSchemaOptions, parentIsLocalized)=>{
        field.tabs.forEach((tab)=>{
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["tabHasName"])(tab)) {
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldIsVirtual"])(tab)) {
                    return;
                }
                const baseSchema = {
                    type: buildSchema({
                        buildSchemaOptions: {
                            disableUnique: buildSchemaOptions.disableUnique,
                            draftsEnabled: buildSchemaOptions.draftsEnabled,
                            options: {
                                _id: false,
                                id: false,
                                minimize: false
                            }
                        },
                        configFields: tab.fields,
                        parentIsLocalized: parentIsLocalized || tab.localized,
                        payload
                    })
                };
                schema.add({
                    [tab.name]: localizeSchema(tab, baseSchema, payload.config.localization, parentIsLocalized)
                });
            } else {
                tab.fields.forEach((subField)=>{
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldIsVirtual"])(subField)) {
                        return;
                    }
                    const addFieldSchema = fieldToSchemaMap[subField.type];
                    if (addFieldSchema) {
                        addFieldSchema(subField, schema, payload, buildSchemaOptions, parentIsLocalized || tab.localized);
                    }
                });
            }
        });
    },
    text: (field, schema, payload, buildSchemaOptions, parentIsLocalized)=>{
        const baseSchema = {
            ...formatBaseSchema({
                buildSchemaOptions,
                field,
                parentIsLocalized
            }),
            type: field.hasMany ? [
                String
            ] : String
        };
        schema.add({
            [field.name]: localizeSchema(field, baseSchema, payload.config.localization, parentIsLocalized)
        });
    },
    textarea: (field, schema, payload, buildSchemaOptions, parentIsLocalized)=>{
        const baseSchema = {
            ...formatBaseSchema({
                buildSchemaOptions,
                field,
                parentIsLocalized
            }),
            type: String
        };
        schema.add({
            [field.name]: localizeSchema(field, baseSchema, payload.config.localization, parentIsLocalized)
        });
    },
    upload: (field, schema, payload, buildSchemaOptions, parentIsLocalized)=>{
        const hasManyRelations = Array.isArray(field.relationTo);
        let schemaToReturn = {};
        const valueType = getRelationshipValueType(field, payload);
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$fields$2f$config$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["fieldShouldBeLocalized"])({
            field,
            parentIsLocalized
        }) && payload.config.localization) {
            schemaToReturn = {
                type: payload.config.localization.localeCodes.reduce((locales, locale)=>{
                    let localeSchema = {};
                    if (hasManyRelations) {
                        localeSchema = {
                            ...formatBaseSchema({
                                buildSchemaOptions,
                                field,
                                parentIsLocalized
                            }),
                            _id: false,
                            type: __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["default"].Schema.Types.Mixed,
                            relationTo: {
                                type: String,
                                enum: field.relationTo
                            },
                            value: {
                                type: valueType,
                                refPath: `${field.name}.${locale}.relationTo`
                            }
                        };
                    } else {
                        localeSchema = {
                            ...formatBaseSchema({
                                buildSchemaOptions,
                                field,
                                parentIsLocalized
                            }),
                            type: valueType,
                            ref: field.relationTo
                        };
                    }
                    return {
                        ...locales,
                        [locale]: field.hasMany ? {
                            type: [
                                localeSchema
                            ],
                            default: formatDefaultValue(field)
                        } : localeSchema
                    };
                }, {}),
                localized: true
            };
        } else if (hasManyRelations) {
            schemaToReturn = {
                ...formatBaseSchema({
                    buildSchemaOptions,
                    field,
                    parentIsLocalized
                }),
                _id: false,
                type: __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["default"].Schema.Types.Mixed,
                relationTo: {
                    type: String,
                    enum: field.relationTo
                },
                value: {
                    type: valueType,
                    refPath: `${field.name}.relationTo`
                }
            };
            if (field.hasMany) {
                schemaToReturn = {
                    type: [
                        schemaToReturn
                    ],
                    default: formatDefaultValue(field)
                };
            }
        } else {
            schemaToReturn = {
                ...formatBaseSchema({
                    buildSchemaOptions,
                    field,
                    parentIsLocalized
                }),
                type: valueType,
                ref: field.relationTo
            };
            if (field.hasMany) {
                schemaToReturn = {
                    type: [
                        schemaToReturn
                    ],
                    default: formatDefaultValue(field)
                };
            }
        }
        schema.add({
            [field.name]: schemaToReturn
        });
    }
};
const getRelationshipValueType = (field, payload)=>{
    if (typeof field.relationTo === 'string') {
        const { customIDType } = payload.collections[field.relationTo];
        if (!customIDType) {
            return __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["default"].Schema.Types.ObjectId;
        }
        if (customIDType === 'number') {
            return __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["default"].Schema.Types.Number;
        }
        return __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["default"].Schema.Types.String;
    }
    // has custom id relationTo
    if (field.relationTo.some((relationTo)=>{
        return !!payload.collections[relationTo].customIDType;
    })) {
        return __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["default"].Schema.Types.Mixed;
    }
    return __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["default"].Schema.Types.ObjectId;
}; //# sourceMappingURL=buildSchema.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/models/buildCollectionSchema.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "buildCollectionSchema": (()=>buildCollectionSchema)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mongoose$2d$aggregate$2d$paginate$2d$v2$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mongoose-aggregate-paginate-v2/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mongoose$2d$paginate$2d$v2$2f$dist$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mongoose-paginate-v2/dist/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$getBuildQueryPlugin$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/getBuildQueryPlugin.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$models$2f$buildSchema$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/models/buildSchema.js [app-rsc] (ecmascript)");
;
;
;
;
const buildCollectionSchema = (collection, payload, schemaOptions = {})=>{
    const schema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$models$2f$buildSchema$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildSchema"])({
        buildSchemaOptions: {
            draftsEnabled: Boolean(typeof collection?.versions === 'object' && collection.versions.drafts),
            indexSortableFields: payload.config.indexSortableFields,
            options: {
                minimize: false,
                timestamps: collection.timestamps !== false,
                ...schemaOptions
            }
        },
        configFields: collection.fields,
        payload
    });
    if (Array.isArray(collection.upload.filenameCompoundIndex)) {
        const indexDefinition = collection.upload.filenameCompoundIndex.reduce((acc, index)=>{
            acc[index] = 1;
            return acc;
        }, {});
        schema.index(indexDefinition, {
            unique: true
        });
    }
    schema.plugin(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mongoose$2d$paginate$2d$v2$2f$dist$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"], {
        useEstimatedCount: true
    }).plugin((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$getBuildQueryPlugin$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getBuildQueryPlugin"])({
        collectionSlug: collection.slug
    }));
    if (Object.keys(collection.joins).length > 0 || Object.keys(collection.polymorphicJoins).length > 0) {
        schema.plugin(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mongoose$2d$aggregate$2d$paginate$2d$v2$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"]);
    }
    return schema;
}; //# sourceMappingURL=buildCollectionSchema.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/models/buildGlobalModel.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "buildGlobalModel": (()=>buildGlobalModel)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__ = __turbopack_import__("[externals]/mongoose [external] (mongoose, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$getBuildQueryPlugin$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/getBuildQueryPlugin.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$models$2f$buildSchema$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/models/buildSchema.js [app-rsc] (ecmascript)");
;
;
;
const buildGlobalModel = (payload)=>{
    if (payload.config.globals && payload.config.globals.length > 0) {
        const globalsSchema = new __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["default"].Schema({}, {
            discriminatorKey: 'globalType',
            minimize: false,
            timestamps: true
        });
        globalsSchema.plugin((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$getBuildQueryPlugin$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getBuildQueryPlugin"])());
        const Globals = __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["default"].model('globals', globalsSchema, 'globals');
        Object.values(payload.config.globals).forEach((globalConfig)=>{
            const globalSchema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$models$2f$buildSchema$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildSchema"])({
                buildSchemaOptions: {
                    options: {
                        minimize: false
                    }
                },
                configFields: globalConfig.fields,
                payload
            });
            Globals.discriminator(globalConfig.slug, globalSchema);
        });
        return Globals;
    }
    return null;
}; //# sourceMappingURL=buildGlobalModel.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/getDBName.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * Used to name database enums and collections
 * Returns the collection or enum name for a given entity
 */ __turbopack_esm__({
    "getDBName": (()=>getDBName)
});
const getDBName = ({ config: { name, slug }, config, target = 'dbName', versions = false })=>{
    let result;
    let custom = config[target];
    if (!custom && target === 'enumName') {
        custom = config['dbName'];
    }
    if (custom) {
        result = typeof custom === 'function' ? custom({}) : custom;
    } else {
        result = name ?? slug;
    }
    if (versions) {
        result = `_${result}_versions`;
    }
    return result;
}; //# sourceMappingURL=getDBName.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/init.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "init": (()=>init)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__ = __turbopack_import__("[externals]/mongoose [external] (mongoose, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mongoose$2d$aggregate$2d$paginate$2d$v2$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mongoose-aggregate-paginate-v2/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mongoose$2d$paginate$2d$v2$2f$dist$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mongoose-paginate-v2/dist/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$models$2f$buildCollectionSchema$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/models/buildCollectionSchema.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$models$2f$buildGlobalModel$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/models/buildGlobalModel.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$models$2f$buildSchema$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/models/buildSchema.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$getBuildQueryPlugin$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/getBuildQueryPlugin.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getDBName$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/getDBName.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildCollectionFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/versions/buildCollectionFields.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildGlobalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/versions/buildGlobalFields.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
;
;
const init = function init() {
    this.payload.config.collections.forEach((collection)=>{
        const schemaOptions = this.collectionsSchemaOptions[collection.slug];
        const schema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$models$2f$buildCollectionSchema$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildCollectionSchema"])(collection, this.payload, schemaOptions);
        if (collection.versions) {
            const versionModelName = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getDBName$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getDBName"])({
                config: collection,
                versions: true
            });
            const versionCollectionFields = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildCollectionFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildVersionCollectionFields"])(this.payload.config, collection);
            const versionSchema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$models$2f$buildSchema$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildSchema"])({
                buildSchemaOptions: {
                    disableUnique: true,
                    draftsEnabled: true,
                    indexSortableFields: this.payload.config.indexSortableFields,
                    options: {
                        minimize: false,
                        timestamps: false
                    },
                    ...schemaOptions
                },
                configFields: versionCollectionFields,
                payload: this.payload
            });
            versionSchema.plugin(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mongoose$2d$paginate$2d$v2$2f$dist$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"], {
                useEstimatedCount: true
            }).plugin((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$getBuildQueryPlugin$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getBuildQueryPlugin"])({
                collectionSlug: collection.slug,
                versionsFields: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildCollectionFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildVersionCollectionFields"])(this.payload.config, collection, true)
            }));
            if (Object.keys(collection.joins).length > 0) {
                versionSchema.plugin(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mongoose$2d$aggregate$2d$paginate$2d$v2$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"]);
            }
            const versionCollectionName = this.autoPluralization === true && !collection.dbName ? undefined : versionModelName;
            this.versions[collection.slug] = __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["default"].model(versionModelName, versionSchema, versionCollectionName);
        }
        const modelName = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getDBName$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getDBName"])({
            config: collection
        });
        const collectionName = this.autoPluralization === true && !collection.dbName ? undefined : modelName;
        this.collections[collection.slug] = __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["default"].model(modelName, schema, collectionName);
    });
    this.globals = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$models$2f$buildGlobalModel$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildGlobalModel"])(this.payload);
    this.payload.config.globals.forEach((global)=>{
        if (global.versions) {
            const versionModelName = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getDBName$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getDBName"])({
                config: global,
                versions: true
            });
            const versionGlobalFields = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildGlobalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildVersionGlobalFields"])(this.payload.config, global);
            const versionSchema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$models$2f$buildSchema$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildSchema"])({
                buildSchemaOptions: {
                    disableUnique: true,
                    draftsEnabled: true,
                    indexSortableFields: this.payload.config.indexSortableFields,
                    options: {
                        minimize: false,
                        timestamps: false
                    }
                },
                configFields: versionGlobalFields,
                payload: this.payload
            });
            versionSchema.plugin(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mongoose$2d$paginate$2d$v2$2f$dist$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"], {
                useEstimatedCount: true
            }).plugin((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$getBuildQueryPlugin$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getBuildQueryPlugin"])({
                versionsFields: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildGlobalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildVersionGlobalFields"])(this.payload.config, global, true)
            }));
            this.versions[global.slug] = __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["default"].model(versionModelName, versionSchema, versionModelName);
        }
    });
}; //# sourceMappingURL=init.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/migrateFresh.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "migrateFresh": (()=>migrateFresh)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$prompts$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/prompts/index.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$migrations$2f$readMigrationFiles$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/database/migrations/readMigrationFiles.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$initTransaction$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/utilities/initTransaction.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$commitTransaction$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/utilities/commitTransaction.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$killTransaction$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/utilities/killTransaction.js [app-rsc] (ecmascript)");
;
;
async function migrateFresh({ forceAcceptWarning = false }) {
    const { payload } = this;
    if (!forceAcceptWarning) {
        const { confirm: acceptWarning } = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$prompts$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["default"])({
            name: 'confirm',
            type: 'confirm',
            initial: false,
            message: `WARNING: This will drop your database and run all migrations. Are you sure you want to proceed?`
        }, {
            onCancel: ()=>{
                process.exit(0);
            }
        });
        if (!acceptWarning) {
            process.exit(0);
        }
    }
    payload.logger.info({
        msg: `Dropping database.`
    });
    await this.connection.dropDatabase();
    const migrationFiles = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$migrations$2f$readMigrationFiles$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["readMigrationFiles"])({
        payload
    });
    payload.logger.debug({
        msg: `Found ${migrationFiles.length} migration files.`
    });
    const req = {
        payload
    };
    // Run all migrate up
    for (const migration of migrationFiles){
        payload.logger.info({
            msg: `Migrating: ${migration.name}`
        });
        try {
            const start = Date.now();
            await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$initTransaction$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["initTransaction"])(req);
            await migration.up({
                payload,
                req
            });
            await payload.create({
                collection: 'payload-migrations',
                data: {
                    name: migration.name,
                    batch: 1
                },
                req
            });
            await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$commitTransaction$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["commitTransaction"])(req);
            payload.logger.info({
                msg: `Migrated:  ${migration.name} (${Date.now() - start}ms)`
            });
        } catch (err) {
            await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$utilities$2f$killTransaction$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["killTransaction"])(req);
            payload.logger.error({
                err,
                msg: `Error running migration ${migration.name}. Rolling back.`
            });
            throw err;
        }
    }
} //# sourceMappingURL=migrateFresh.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/queryDrafts.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "queryDrafts": (()=>queryDrafts)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildQuery.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildSortParam$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildSortParam.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildJoinAggregation$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/buildJoinAggregation.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildProjectionFromSelect$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/buildProjectionFromSelect.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/getSession.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeInternalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/sanitizeInternalFields.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$flattenWhereToOperators$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/database/flattenWhereToOperators.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$combineQueries$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/database/combineQueries.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildCollectionFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/versions/buildCollectionFields.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
const queryDrafts = async function queryDrafts({ collection, joins, limit, locale, page, pagination, req, select, sort: sortArg, where }) {
    const VersionModel = this.versions[collection];
    const collectionConfig = this.payload.collections[collection].config;
    const options = {
        session: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getSession"])(this, req)
    };
    let hasNearConstraint;
    let sort;
    if (where) {
        const constraints = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$flattenWhereToOperators$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["flattenWhereToOperators"])(where);
        hasNearConstraint = constraints.some((prop)=>Object.keys(prop).some((key)=>key === 'near'));
    }
    if (!hasNearConstraint) {
        sort = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildSortParam$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildSortParam"])({
            config: this.payload.config,
            fields: collectionConfig.flattenedFields,
            locale,
            sort: sortArg || collectionConfig.defaultSort,
            timestamps: true
        });
    }
    const combinedWhere = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$combineQueries$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["combineQueries"])({
        latest: {
            equals: true
        }
    }, where);
    const fields = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildCollectionFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildVersionCollectionFields"])(this.payload.config, collectionConfig, true);
    const versionQuery = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildQuery"])({
        adapter: this,
        fields,
        locale,
        where: combinedWhere
    });
    const projection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildProjectionFromSelect$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildProjectionFromSelect"])({
        adapter: this,
        fields,
        select
    });
    // useEstimatedCount is faster, but not accurate, as it ignores any filters. It is thus set to true if there are no filters.
    const useEstimatedCount = hasNearConstraint || !versionQuery || Object.keys(versionQuery).length === 0;
    const paginationOptions = {
        lean: true,
        leanWithId: true,
        options,
        page,
        pagination,
        projection,
        sort,
        useEstimatedCount
    };
    if (this.collation) {
        const defaultLocale = 'en';
        paginationOptions.collation = {
            locale: locale && locale !== 'all' && locale !== '*' ? locale : defaultLocale,
            ...this.collation
        };
    }
    if (!useEstimatedCount && Object.keys(versionQuery).length === 0 && this.disableIndexHints !== true) {
        // Improve the performance of the countDocuments query which is used if useEstimatedCount is set to false by adding
        // a hint. By default, if no hint is provided, MongoDB does not use an indexed field to count the returned documents,
        // which makes queries very slow. This only happens when no query (filter) is provided. If one is provided, it uses
        // the correct indexed field
        paginationOptions.useCustomCountFn = ()=>{
            return Promise.resolve(VersionModel.countDocuments(versionQuery, {
                hint: {
                    _id: 1
                }
            }));
        };
    }
    if (limit > 0) {
        paginationOptions.limit = limit;
        // limit must also be set here, it's ignored when pagination is false
        paginationOptions.options.limit = limit;
    }
    let result;
    const aggregate = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildJoinAggregation$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildJoinAggregation"])({
        adapter: this,
        collection,
        collectionConfig,
        joins,
        locale,
        projection,
        query: versionQuery,
        versions: true
    });
    // build join aggregation
    if (aggregate) {
        result = await VersionModel.aggregatePaginate(VersionModel.aggregate(aggregate), paginationOptions);
    } else {
        result = await VersionModel.paginate(versionQuery, paginationOptions);
    }
    const docs = JSON.parse(JSON.stringify(result.docs));
    return {
        ...result,
        docs: docs.map((doc)=>{
            doc = {
                _id: doc.parent,
                id: doc.parent,
                ...doc.version
            };
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeInternalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeInternalFields"])(doc);
        })
    };
}; //# sourceMappingURL=queryDrafts.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/transactions/beginTransaction.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "beginTransaction": (()=>beginTransaction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$errors$2f$APIError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/errors/APIError.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$v4$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__default__as__v4$3e$__ = __turbopack_import__("[project]/node_modules/uuid/dist/esm-node/v4.js [app-rsc] (ecmascript) <export default as v4>");
;
;
const beginTransaction = async function beginTransaction(options) {
    if (!this.connection) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$errors$2f$APIError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["APIError"]('beginTransaction called while no connection to the database exists');
    }
    const client = this.connection.getClient();
    const id = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uuid$2f$dist$2f$esm$2d$node$2f$v4$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__default__as__v4$3e$__["v4"])();
    if (!this.sessions[id]) {
        this.sessions[id] = client.startSession();
    }
    if (this.sessions[id].inTransaction()) {
        this.payload.logger.warn('beginTransaction called while transaction already exists');
    } else {
        this.sessions[id].startTransaction(options || this.transactionOptions);
    }
    return id;
}; //# sourceMappingURL=beginTransaction.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/transactions/commitTransaction.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "commitTransaction": (()=>commitTransaction)
});
const commitTransaction = async function commitTransaction(id) {
    if (id instanceof Promise) {
        return;
    }
    if (!this.sessions[id]?.inTransaction()) {
        return;
    }
    await this.sessions[id].commitTransaction();
    try {
        await this.sessions[id].endSession();
    } catch (error) {
    // ending sessions is only best effort and won't impact anything if it fails since the transaction was committed
    }
    delete this.sessions[id];
}; //# sourceMappingURL=commitTransaction.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/transactions/rollbackTransaction.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "rollbackTransaction": (()=>rollbackTransaction)
});
const rollbackTransaction = async function rollbackTransaction(incomingID = '') {
    let transactionID;
    if (incomingID instanceof Promise) {
        transactionID = await incomingID;
    } else {
        transactionID = incomingID;
    }
    // if multiple operations are using the same transaction, the first will flow through and delete the session.
    // subsequent calls should be ignored.
    if (!this.sessions[transactionID]) {
        return;
    }
    // when session exists but is not inTransaction something unexpected is happening to the session
    if (!this.sessions[transactionID].inTransaction()) {
        this.payload.logger.warn('rollbackTransaction called when no transaction exists');
        delete this.sessions[transactionID];
        return;
    }
    // the first call for rollback should be aborted and deleted causing any other operations with the same transaction to fail
    try {
        await this.sessions[transactionID].abortTransaction();
        await this.sessions[transactionID].endSession();
    } catch (error) {
    // ignore the error as it is likely a race condition from multiple errors
    }
    delete this.sessions[transactionID];
}; //# sourceMappingURL=rollbackTransaction.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/updateGlobal.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "updateGlobal": (()=>updateGlobal)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildProjectionFromSelect$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/buildProjectionFromSelect.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/getSession.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeInternalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/sanitizeInternalFields.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeRelationshipIDs$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/sanitizeRelationshipIDs.js [app-rsc] (ecmascript)");
;
;
;
;
const updateGlobal = async function updateGlobal({ slug, data, options: optionsArgs = {}, req, select }) {
    const Model = this.globals;
    const fields = this.payload.config.globals.find((global)=>global.slug === slug).fields;
    const options = {
        ...optionsArgs,
        lean: true,
        new: true,
        projection: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildProjectionFromSelect$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildProjectionFromSelect"])({
            adapter: this,
            fields: this.payload.config.globals.find((global)=>global.slug === slug).flattenedFields,
            select
        }),
        session: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getSession"])(this, req)
    };
    let result;
    const sanitizedData = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeRelationshipIDs$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeRelationshipIDs"])({
        config: this.payload.config,
        data,
        fields
    });
    result = await Model.findOneAndUpdate({
        globalType: slug
    }, sanitizedData, options);
    if (!result) {
        return null;
    }
    result = JSON.parse(JSON.stringify(result));
    // custom id type reset
    result.id = result._id;
    result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeInternalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeInternalFields"])(result);
    return result;
}; //# sourceMappingURL=updateGlobal.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/updateGlobalVersion.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "updateGlobalVersion": (()=>updateGlobalVersion)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildQuery.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildProjectionFromSelect$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/buildProjectionFromSelect.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/getSession.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeRelationshipIDs$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/sanitizeRelationshipIDs.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildGlobalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/versions/buildGlobalFields.js [app-rsc] (ecmascript)");
;
;
;
;
;
async function updateGlobalVersion({ id, global: globalSlug, locale, options: optionsArgs = {}, req, select, versionData, where }) {
    const VersionModel = this.versions[globalSlug];
    const whereToUse = where || {
        id: {
            equals: id
        }
    };
    const currentGlobal = this.payload.config.globals.find((global)=>global.slug === globalSlug);
    const fields = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildGlobalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildVersionGlobalFields"])(this.payload.config, currentGlobal);
    const flattenedFields = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildGlobalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildVersionGlobalFields"])(this.payload.config, currentGlobal, true);
    const options = {
        ...optionsArgs,
        lean: true,
        new: true,
        projection: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildProjectionFromSelect$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildProjectionFromSelect"])({
            adapter: this,
            fields: flattenedFields,
            select
        }),
        session: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getSession"])(this, req)
    };
    const query = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildQuery"])({
        adapter: this,
        fields: flattenedFields,
        locale,
        where: whereToUse
    });
    const sanitizedData = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeRelationshipIDs$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeRelationshipIDs"])({
        config: this.payload.config,
        data: versionData,
        fields
    });
    const doc = await VersionModel.findOneAndUpdate(query, sanitizedData, options);
    if (!doc) {
        return null;
    }
    const result = JSON.parse(JSON.stringify(doc));
    const verificationToken = doc._verificationToken;
    // custom id type reset
    result.id = result._id;
    if (verificationToken) {
        result._verificationToken = verificationToken;
    }
    return result;
} //# sourceMappingURL=updateGlobalVersion.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/updateOne.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "updateOne": (()=>updateOne)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildQuery.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildProjectionFromSelect$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/buildProjectionFromSelect.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/getSession.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$handleError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/handleError.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeInternalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/sanitizeInternalFields.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeRelationshipIDs$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/sanitizeRelationshipIDs.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
const updateOne = async function updateOne({ id, collection, data, locale, options: optionsArgs = {}, req, select, where: whereArg }) {
    const where = id ? {
        id: {
            equals: id
        }
    } : whereArg;
    const Model = this.collections[collection];
    const fields = this.payload.collections[collection].config.fields;
    const options = {
        ...optionsArgs,
        lean: true,
        new: true,
        projection: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildProjectionFromSelect$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildProjectionFromSelect"])({
            adapter: this,
            fields: this.payload.collections[collection].config.flattenedFields,
            select
        }),
        session: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getSession"])(this, req)
    };
    const query = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildQuery"])({
        adapter: this,
        collectionSlug: collection,
        fields: this.payload.collections[collection].config.flattenedFields,
        locale,
        where
    });
    let result;
    const sanitizedData = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeRelationshipIDs$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeRelationshipIDs"])({
        config: this.payload.config,
        data,
        fields
    });
    try {
        result = await Model.findOneAndUpdate(query, sanitizedData, options);
    } catch (error) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$handleError$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["handleError"])({
            collection,
            error,
            req
        });
    }
    if (!result) {
        return null;
    }
    result = JSON.parse(JSON.stringify(result));
    result.id = result._id;
    result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeInternalFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeInternalFields"])(result);
    return result;
}; //# sourceMappingURL=updateOne.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/updateVersion.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "updateVersion": (()=>updateVersion)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queries/buildQuery.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildProjectionFromSelect$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/buildProjectionFromSelect.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/getSession.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeRelationshipIDs$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/utilities/sanitizeRelationshipIDs.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildCollectionFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/versions/buildCollectionFields.js [app-rsc] (ecmascript)");
;
;
;
;
;
const updateVersion = async function updateVersion({ id, collection, locale, options: optionsArgs = {}, req, select, versionData, where }) {
    const VersionModel = this.versions[collection];
    const whereToUse = where || {
        id: {
            equals: id
        }
    };
    const fields = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildCollectionFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildVersionCollectionFields"])(this.payload.config, this.payload.collections[collection].config);
    const flattenedFields = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$versions$2f$buildCollectionFields$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildVersionCollectionFields"])(this.payload.config, this.payload.collections[collection].config, true);
    const options = {
        ...optionsArgs,
        lean: true,
        new: true,
        projection: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$buildProjectionFromSelect$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildProjectionFromSelect"])({
            adapter: this,
            fields: flattenedFields,
            select
        }),
        session: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$getSession$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getSession"])(this, req)
    };
    const query = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queries$2f$buildQuery$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["buildQuery"])({
        adapter: this,
        fields: flattenedFields,
        locale,
        where: whereToUse
    });
    const sanitizedData = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$utilities$2f$sanitizeRelationshipIDs$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["sanitizeRelationshipIDs"])({
        config: this.payload.config,
        data: versionData,
        fields
    });
    const doc = await VersionModel.findOneAndUpdate(query, sanitizedData, options);
    if (!doc) {
        return null;
    }
    const result = JSON.parse(JSON.stringify(doc));
    const verificationToken = doc._verificationToken;
    // custom id type reset
    result.id = result._id;
    if (verificationToken) {
        result._verificationToken = verificationToken;
    }
    return result;
}; //# sourceMappingURL=updateVersion.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/upsert.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "upsert": (()=>upsert)
});
const upsert = async function upsert({ collection, data, locale, req, select, where }) {
    return this.updateOne({
        collection,
        data,
        locale,
        options: {
            upsert: true
        },
        req,
        select,
        where
    });
}; //# sourceMappingURL=upsert.js.map
}}),
"[project]/node_modules/@payloadcms/db-mongodb/dist/index.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "mongooseAdapter": (()=>mongooseAdapter)
});
var __TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__ = __turbopack_import__("[externals]/fs [external] (fs, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__ = __turbopack_import__("[externals]/mongoose [external] (mongoose, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$path__$5b$external$5d$__$28$path$2c$__cjs$29$__ = __turbopack_import__("[externals]/path [external] (path, cjs)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$connect$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/connect.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$count$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/count.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$countGlobalVersions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/countGlobalVersions.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$countVersions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/countVersions.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$create$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/create.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$createGlobal$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/createGlobal.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$createGlobalVersion$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/createGlobalVersion.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$createMigration$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/createMigration.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$createVersion$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/createVersion.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$deleteMany$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/deleteMany.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$deleteOne$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/deleteOne.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$deleteVersions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/deleteVersions.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$destroy$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/destroy.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$find$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/find.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$findGlobal$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/findGlobal.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$findGlobalVersions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/findGlobalVersions.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$findOne$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/findOne.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$findVersions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/findVersions.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$init$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/init.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$migrateFresh$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/migrateFresh.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queryDrafts$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/queryDrafts.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$transactions$2f$beginTransaction$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/transactions/beginTransaction.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$transactions$2f$commitTransaction$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/transactions/commitTransaction.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$transactions$2f$rollbackTransaction$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/transactions/rollbackTransaction.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$updateGlobal$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/updateGlobal.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$updateGlobalVersion$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/updateGlobalVersion.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$updateOne$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/updateOne.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$updateVersion$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/updateVersion.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$upsert$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@payloadcms/db-mongodb/dist/upsert.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$createDatabaseAdapter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/database/createDatabaseAdapter.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$defaultBeginTransaction$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/payload/dist/database/defaultBeginTransaction.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
function mongooseAdapter({ autoPluralization = true, collectionsSchemaOptions = {}, connectOptions, disableIndexHints = false, ensureIndexes, migrationDir: migrationDirArg, mongoMemoryServer, prodMigrations, transactionOptions = {}, url }) {
    function adapter({ payload }) {
        const migrationDir = findMigrationDir(migrationDirArg);
        __TURBOPACK__imported__module__$5b$externals$5d2f$mongoose__$5b$external$5d$__$28$mongoose$2c$__cjs$29$__["default"].set('strictQuery', false);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$createDatabaseAdapter$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createDatabaseAdapter"])({
            name: 'mongoose',
            // Mongoose-specific
            autoPluralization,
            collections: {},
            connection: undefined,
            connectOptions: connectOptions || {},
            disableIndexHints,
            ensureIndexes,
            globals: undefined,
            mongoMemoryServer,
            sessions: {},
            transactionOptions: transactionOptions === false ? undefined : transactionOptions,
            url,
            versions: {},
            // DatabaseAdapter
            beginTransaction: transactionOptions === false ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$payload$2f$dist$2f$database$2f$defaultBeginTransaction$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["defaultBeginTransaction"])() : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$transactions$2f$beginTransaction$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["beginTransaction"],
            collectionsSchemaOptions,
            commitTransaction: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$transactions$2f$commitTransaction$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["commitTransaction"],
            connect: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$connect$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["connect"],
            count: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$count$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["count"],
            countGlobalVersions: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$countGlobalVersions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["countGlobalVersions"],
            countVersions: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$countVersions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["countVersions"],
            create: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$create$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["create"],
            createGlobal: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$createGlobal$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createGlobal"],
            createGlobalVersion: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$createGlobalVersion$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createGlobalVersion"],
            createMigration: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$createMigration$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createMigration"],
            createVersion: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$createVersion$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["createVersion"],
            defaultIDType: 'text',
            deleteMany: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$deleteMany$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["deleteMany"],
            deleteOne: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$deleteOne$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["deleteOne"],
            deleteVersions: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$deleteVersions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["deleteVersions"],
            destroy: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$destroy$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["destroy"],
            find: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$find$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["find"],
            findGlobal: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$findGlobal$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["findGlobal"],
            findGlobalVersions: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$findGlobalVersions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["findGlobalVersions"],
            findOne: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$findOne$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["findOne"],
            findVersions: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$findVersions$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["findVersions"],
            init: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$init$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["init"],
            migrateFresh: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$migrateFresh$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["migrateFresh"],
            migrationDir,
            packageName: '@payloadcms/db-mongodb',
            payload,
            prodMigrations,
            queryDrafts: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$queryDrafts$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["queryDrafts"],
            rollbackTransaction: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$transactions$2f$rollbackTransaction$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["rollbackTransaction"],
            updateGlobal: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$updateGlobal$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["updateGlobal"],
            updateGlobalVersion: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$updateGlobalVersion$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["updateGlobalVersion"],
            updateOne: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$updateOne$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["updateOne"],
            updateVersion: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$updateVersion$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["updateVersion"],
            upsert: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$payloadcms$2f$db$2d$mongodb$2f$dist$2f$upsert$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["upsert"]
        });
    }
    return {
        defaultIDType: 'text',
        init: adapter
    };
}
/**
 * Attempt to find migrations directory.
 *
 * Checks for the following directories in order:
 * - `migrationDir` argument from Payload config
 * - `src/migrations`
 * - `dist/migrations`
 * - `migrations`
 *
 * Defaults to `src/migrations`
 *
 * @param migrationDir
 * @returns
 */ function findMigrationDir(migrationDir) {
    const cwd = process.cwd();
    const srcDir = __TURBOPACK__imported__module__$5b$externals$5d2f$path__$5b$external$5d$__$28$path$2c$__cjs$29$__["default"].resolve(cwd, 'src/migrations');
    const distDir = __TURBOPACK__imported__module__$5b$externals$5d2f$path__$5b$external$5d$__$28$path$2c$__cjs$29$__["default"].resolve(cwd, 'dist/migrations');
    const relativeMigrations = __TURBOPACK__imported__module__$5b$externals$5d2f$path__$5b$external$5d$__$28$path$2c$__cjs$29$__["default"].resolve(cwd, 'migrations');
    // Use arg if provided
    if (migrationDir) {
        return migrationDir;
    }
    // Check other common locations
    if (__TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__["default"].existsSync(srcDir)) {
        return srcDir;
    }
    if (__TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__["default"].existsSync(distDir)) {
        return distDir;
    }
    if (__TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__["default"].existsSync(relativeMigrations)) {
        return relativeMigrations;
    }
    return srcDir;
} //# sourceMappingURL=index.js.map
}}),

};

//# sourceMappingURL=node_modules_%40payloadcms_db-mongodb_dist_306543._.js.map